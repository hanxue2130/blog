<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Springboot</title>
    <link href="/2021/11/30/Springboot/"/>
    <url>/2021/11/30/Springboot/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Overview-of-Spring-Boot"><a href="#1-Overview-of-Spring-Boot" class="headerlink" title="1. Overview of Spring Boot"></a>1. Overview of Spring Boot</h2><p><strong>Goal</strong>: Understand what Spring Boot is and what it does</p><p><strong>summary</strong>:</p><p>Spring Boot is a convenient to build scaffolding based on spring engineering; its role is to help developers quickly build large spring projects. Simplify the configuration of the project and rely on management; realize that developers concentrate their time on business development.</p><h2 id="2-Getting-Started-with-Spring-Boot"><a href="#2-Getting-Started-with-Spring-Boot" class="headerlink" title="2. Getting Started with Spring Boot"></a>2. Getting Started with Spring Boot</h2><p><strong>Goal</strong>: Be able to build a project using Spring Boot</p><p><strong>analyze</strong>:</p><p>Requirements: You can visit <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> in the browser to output a string of characters</p><p>Implementation steps:</p><ol><li>Create a project;</li><li>Add dependency (starter dependency, spring-boot-starter-web);</li><li>Create a startup class;</li><li>Create the processor Controller;</li><li>Testing</li></ol><p><strong>summary</strong>:</p><p>Spring Boot projects can quickly create web projects by adding starter dependencies and creating startup boot classes.</p><blockquote><p>spring-boot-starter-web default application server port is 8080</p></blockquote><h2 id="3-Java-code-configuration"><a href="#3-Java-code-configuration" class="headerlink" title="3. Java code configuration"></a>3. Java code configuration</h2><p><strong>Target</strong>: You can use @Value to obtain configuration file configuration items and combine @Bean to register components to Spring</p><p><strong>analyze</strong>:</p><p>Requirements: Use Java code to configure the database connection pool, and can be injected and used in the processor</p><p>step:</p><ol><li>Add dependencies;</li><li>Create a database;</li><li>Create a configuration file jdbc.properties for database connection parameters;</li><li>Create a configuration class;</li><li>Transform the processor class to inject the data source and use it</li></ol><p><strong>summary</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span><br>    String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    String password;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">()</span></span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driverClassName);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-Spring-Boot-attribute-injection-method"><a href="#4-Spring-Boot-attribute-injection-method" class="headerlink" title="4. Spring Boot attribute injection method"></a>4. Spring Boot attribute injection method</h2><p><strong>Goal</strong>: Able to use @ConfigurationProperties to read and apply Spring Boot configuration file configuration items</p><p><strong>analyze</strong>:</p><p>Requirements: Read the configuration items in the configuration file into an object;</p><p>Implementation: You can use the annotation @ConfigurationProperties provided by Spring Boot, which can read the configuration items in the Spring Boot configuration file (must be application.properties or application.yml by default) into an object.</p><p>Implementation steps:</p><ol><li>Create a configuration item class JdbcProperties class, add @ConfigurationProperties above the class name;</li><li>Modify the name of jdbc.properties to application.properties;</li><li>Inject the JdbcProperties object into JdbcConfig;</li><li>Testing</li></ol><p><strong>summary</strong>:</p><p>-Use @ConfigurationProperties to write configuration item classes to set the configuration items in the configuration file to the object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jdbc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcProperties</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUrl</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUrl</span><span class="hljs-params">(String url)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDriverClassName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> driverClassName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDriverClassName</span><span class="hljs-params">(String driverClassName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.driverClassName = driverClassName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>-Use @ConfigurationProperties on the method</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jdbc&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Multiple-yml-file-configuration"><a href="#5-Multiple-yml-file-configuration" class="headerlink" title="5. Multiple yml file configuration"></a>5. Multiple yml file configuration</h2><p><strong>Target</strong>: Multiple yml files can be configured and activated in the application.yml file</p><p><strong>analyze</strong>:</p><p>The yaml and properties configuration files have the same functions and functions except for the different presentation forms; the original way of reading in the project does not need to be changed.</p><ol><li>Features of yml configuration file:</li></ol><ol><li>Display configuration items in a tree-like hierarchical structure;</li><li>If there is a relationship between the configuration items, you need to branch and leave two blanks;</li><li>If the configuration item has a value, you need to write the value of the configuration item after a blank space after <code>:</code>;</li></ol><p>Modify the application.properties configuration file to application.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">jdbc:</span><br>  <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/heima</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">key:</span><br>  <span class="hljs-attr">abc:</span> <span class="hljs-string">cba</span><br>  <span class="hljs-attr">def:</span><br>    <span class="hljs-string">-g</span><br>    <span class="hljs-string">-h</span><br>    <span class="hljs-string">-j</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Multiple yml configuration files; they are allowed in spring boot. The name of these configuration files must be application-***.yml, and these configuration files must be activated in the application.yml configuration file before they can be used.</li></ol><ol start="3"><li>If the properties and yml configuration files exist in the spring boot project at the same time; then both types of configuration files are valid. If there are configuration items with the same name in the two configuration files, the properties file will be the main one.</li></ol><p><strong>summary</strong>:</p><p>In the case of multiple configuration files, these files need to be activated in the application.yml file:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#Activate configuration file; need to specify other configuration file name</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">abc,def</span><br></code></pre></td></tr></table></figure><h2 id="6-Principles-of-Automatic-Configuration"><a href="#6-Principles-of-Automatic-Configuration" class="headerlink" title="6. Principles of Automatic Configuration"></a>6. Principles of Automatic Configuration</h2><p><strong>Goal</strong>: Understand the configuration loading process of the Spring Boot project</p><p><strong>summary</strong>:</p><p>-Many auto-configuration classes are defined in the <code>META-INF\spring.fatories</code> file; you can rely on auto-configuration components based on the starter added in the pom.xml file<br>-Through the following process, you can modify the application configuration file and change the default parameters of the automatically configured components</p><h2 id="7-lombok-application"><a href="#7-lombok-application" class="headerlink" title="7. lombok application"></a>7. lombok application</h2><p><strong>Goal</strong>: Use lombok’s annotations to simplify the pojo class</p><p><strong>analyze</strong>:</p><p>Use Spring Boot to integrate SSM project; need to use database data.</p><p>-Import database table data into the database (springboot_test);</p><p>-Write the entity class corresponding to the database table; in general, you need to write methods such as get/set/toString, which will take time and make the entity class look bloated. You can use the lombok plugin to simplify the entity class.</p><p>  lombok is a plug-in tool package; some annotations such as @Data, @Getter are provided to simplify the writing of the construction method, get/set and other methods in the entity class.</p><ol><li>Install the lombok plugin in IDEA;</li><li>Add the dependency corresponding to lombok to the project pom.xml file;</li><li>Modify entity classes to use lombok annotations</li></ol><p><strong>summary</strong>:</p><p>Use on Bean:<br>@Data: automatically provide getter and setter, hashCode, equals, toString and other methods<br>@Getter: automatically provide a getter method<br>@Setter: automatically provide setter methods<br>@Slf4j: Log variables are automatically provided in the bean, and the useful thing is the log function of slf4j.</p><h2 id="8-Spring-Boot-integration-SpringMVC-port-and-static-resources"><a href="#8-Spring-Boot-integration-SpringMVC-port-and-static-resources" class="headerlink" title="8. Spring Boot integration-SpringMVC port and static resources"></a>8. Spring Boot integration-SpringMVC port and static resources</h2><p><strong>Target</strong>: You can modify the port of tomcat and access the static resources in the project</p><p><strong>analyze</strong>:</p><p>-Modify tomcat port</p><p>  Query **Properties, set the configuration item (prefix + class variable name) to the application configuration file</p><p>-Access static resources in the project</p><p>  Where to place static resources; place static resources and access them</p><p><strong>summary</strong>:</p><p>-Modify the project tomcat port:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#tomcat port</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>-In the spring boot project, static resources can be placed in the following directories:</p><h2 id="9-Spring-Boot-Integration-SpringMVC-Interceptor"><a href="#9-Spring-Boot-Integration-SpringMVC-Interceptor" class="headerlink" title="9. Spring Boot Integration-SpringMVC Interceptor"></a>9. Spring Boot Integration-SpringMVC Interceptor</h2><p><strong>Target</strong>: You can configure a custom SpringMVC interceptor in the Spring Boot project</p><p><strong>analyze</strong>:</p><ol><li>Write the interceptor (implement HandlerInterceptor);</li><li>Write a configuration class to implement WebMvcConfigurer, and add various components to this class;</li><li>Testing</li></ol><p><strong>summary</strong>:</p><p>You can add various components through the configuration class in the spring boot project; if you want to add an interceptor:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.config;<br><br><span class="hljs-keyword">import</span> com.itheima.interceptor.MyInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-comment">//Register the interceptor</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MyInterceptor <span class="hljs-title">myInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyInterceptor();<br>    &#125;<br><br>    <span class="hljs-comment">//Add interceptor to spring mvc interceptor chain</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(myInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="10-Spring-Boot-Integration-Transaction-and-Connection-Pool"><a href="#10-Spring-Boot-Integration-Transaction-and-Connection-Pool" class="headerlink" title="10. Spring Boot Integration-Transaction and Connection Pool"></a>10. Spring Boot Integration-Transaction and Connection Pool</h2><p><strong>Goal</strong>: Configure Spring Boot’s own default hikari database connection pool and use @Transactional annotations for transaction configuration</p><p><strong>analyze</strong>:</p><p>-Transaction configuration</p><ol><li>Add transaction-related starter dependencies and mysql-related dependencies;</li><li>Write business class UserService using transaction annotation @Transactional</li></ol><p>-Database connection pool hikari configuration</p><p>  Only need to specify database related parameters in the application configuration file</p><p><strong>summary</strong>:</p><p>-Transaction configuration; only need to add jdbc starter dependency<br>-The database connection pool uses the default hikari, which is configured in the configuration file as follows:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/springboot_test</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br></code></pre></td></tr></table></figure><h2 id="11-Spring-Boot-Integration-Mybatis"><a href="#11-Spring-Boot-Integration-Mybatis" class="headerlink" title="11. Spring Boot Integration-Mybatis"></a>11. Spring Boot Integration-Mybatis</h2><p><strong>Objective</strong>: Configure the integration package of Mybatis in the Spring Boot project, set the entity category name of Mybatis, and output the configuration items for executing sql statements</p><p><strong>analyze</strong>:</p><ol><li>Add starter dependency;</li><li>Configure Mybatis: entity category name package, log, mapping file, etc.;</li><li>Configure MapperScan</li></ol><p><strong>summary</strong>:</p><p>-Add mybatis official launcher for spring boot</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br></code></pre></td></tr></table></figure><p>-Configure mybatis</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># Entity category name package path</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.itheima.pojo</span><br>  <span class="hljs-comment"># Map file path</span><br>  <span class="hljs-comment"># mapper-locations: classpath:mappers/*.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><p>-Set the mapper scan in the launcher class</p><h2 id="12-Spring-Boot-Integration-Universal-Mapper"><a href="#12-Spring-Boot-Integration-Universal-Mapper" class="headerlink" title="12. Spring Boot Integration-Universal Mapper"></a>12. Spring Boot Integration-Universal Mapper</h2><p><strong>Goal</strong>: Configure the general Mapper component to the Spring Boot project and use the Mapper<T> interface</T></p><p><strong>analyze</strong>:</p><p>General Mapper: It can realize automatic splicing of sql statements; all mappers do not need to write any method, that is, no sql statement is written. Can improve development efficiency.</p><ol><li>Add starter dependency;</li><li>Transform UserMapper to inherit Mapper<User>;</User></li><li>Modify the Mapper scan annotation in the startup boot class Application;</li><li>Modify the User entity class to add jpa annotations;</li><li>Transform UserService to realize business functions;</li></ol><p><strong>summary</strong>:</p><blockquote><p>The mapper scan annotation on the startup boot class must be modified to the scan annotation of the general mapper</p></blockquote><h2 id="13-Spring-Boot-Integration-Test"><a href="#13-Spring-Boot-Integration-Test" class="headerlink" title="13. Spring Boot Integration Test"></a>13. Spring Boot Integration Test</h2><p><strong>Target</strong>: Can access the corresponding path of the processor to query the data in the database according to id</p><p><strong>analyze</strong>:</p><ol><li>Transform HelloController, inject UserService and use its methods to implement queries;</li><li>Start the project for testing <a href="http://localhost/user/user">http://localhost/user/user</a> id –&gt; <a href="http://localhost/user/8">http://localhost/user/8</a></li></ol><p><strong>summary</strong>:</p><p>Modified HelloController:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserService userService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Query users based on user id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id user id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> user</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> userService.queryById(id);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="14-Spring-Boot-Integration-Junit"><a href="#14-Spring-Boot-Integration-Junit" class="headerlink" title="14. Spring Boot Integration-Junit"></a>14. Spring Boot Integration-Junit</h2><p><strong>Objective</strong>: Use Junit to unit test the UserService method in the Spring Boot project</p><p><strong>analyze</strong>:</p><ol><li>Add the starter dependency spring-boot-starter-test;</li><li>Writing test classes</li></ol><p><strong>summary</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = userService.queryById(<span class="hljs-number">8L</span>);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span>+ user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveUser</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setUserName(<span class="hljs-string">&quot;test2&quot;</span>);<br>        user.setName(<span class="hljs-string">&quot;test2&quot;</span>);<br>        user.setAge(<span class="hljs-number">13</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        user.setSex(<span class="hljs-number">1</span>);<br>        user.setCreated(<span class="hljs-keyword">new</span> Date());<br>        userService.saveUser(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>If you write a test class in a Spring Boot project, you must add @SpringBootTest to the class</p></blockquote><h2 id="15-Spring-Boot-integration-redis"><a href="#15-Spring-Boot-integration-redis" class="headerlink" title="15. Spring Boot integration-redis"></a>15. Spring Boot integration-redis</h2><p><strong>Goal</strong>: Use Junit to test the use of RedisTemplate in the Spring Boot project</p><p><strong>analyze</strong>:</p><ol><li>Add starter dependency; spring-boot-starter-data-redis</li><li>Configure and modify the connection parameters of redis in application.yml; (redis needs to be started)</li><li>Write test classes and apply RedisTemplate to operate 5 data types in redis (string/hash/list/set/sorted set)</li></ol><p><strong>summary</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//string string</span><br>        <span class="hljs-comment">//redisTemplate.opsForValue().set(&quot;str&quot;, &quot;heima&quot;);</span><br>        redisTemplate.boundValueOps(<span class="hljs-string">&quot;str&quot;</span>).set(<span class="hljs-string">&quot;heima&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;str = &quot;</span>+ redisTemplate.opsForValue().get(<span class="hljs-string">&quot;str&quot;</span>));<br><br>        <span class="hljs-comment">//hash hash</span><br>        redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;heima&quot;</span>);<br>        redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">13</span>);<br>        <span class="hljs-comment">//Get all domains</span><br>        Set set = redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).keys();<br>        System.out.println(<span class="hljs-string">&quot;Hash all fields:&quot;</span> + set);<br>        <span class="hljs-comment">//Get all values</span><br>        List list = redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).values();<br>        System.out.println(<span class="hljs-string">&quot;Hash the value of all fields:&quot;</span> + list);<br><br>        <span class="hljs-comment">//list list</span><br>        redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).leftPush(<span class="hljs-string">&quot;c&quot;</span>);<br>        redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).leftPush(<span class="hljs-string">&quot;b&quot;</span>);<br>        redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).leftPush(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-comment">//Get all elements</span><br>        list = redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).range(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;All elements in list:&quot;</span> + list);<br><br>        <span class="hljs-comment">// set collection</span><br>        redisTemplate.boundSetOps(<span class="hljs-string">&quot;s_key&quot;</span>).add(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>        set = redisTemplate.boundSetOps(<span class="hljs-string">&quot;s_key&quot;</span>).members();<br>        System.out.println(<span class="hljs-string">&quot;All elements in set collection:&quot;</span> + set);<br><br>        <span class="hljs-comment">// sorted set ordered set</span><br>        redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).add(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">30</span>);<br>        redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).add(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">20</span>);<br>        redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).add(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">10</span>);<br>        set = redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).range(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;All elements in zset ordered set:&quot;</span> + set);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="16-Spring-Boot-project-deployment"><a href="#16-Spring-Boot-project-deployment" class="headerlink" title="16. Spring Boot project deployment"></a>16. Spring Boot project deployment</h2><p><strong>Goal</strong>: Use the maven command to type the Spring Boot project into a jar package and run the test</p><p><strong>analyze</strong>:</p><ol><li>You need to add packaging components to put the resources, configuration, and dependency packages in the project into a jar package; you can use maven’s <code>package</code>;</li><li>Deployment: java -jar package name</li></ol><p><strong>summary</strong>:</p><p>-Add packaging components</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- If the plug-in is not configured when the jar package is typed, the jar package that is typed out has no manifest file --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>-Deployment and operation</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -jar package name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Array_Question</title>
    <link href="/2021/11/15/Array_Question/"/>
    <url>/2021/11/15/Array_Question/</url>
    
    <content type="html"><![CDATA[<h1 id="1-close-to-a-given-number"><a href="#1-close-to-a-given-number" class="headerlink" title="1 close to a given number"></a>1 close to a given number</h1><pre><code>public static void main(String[] args) &#123;</code></pre><p>//        close_to_given_num.method1();<br>        close_to_given_num.method2();<br>    }<br>    public static void method1(){<br>        int[] arr = {-40,-5,1,3,6,7,8,20};<br>        int left = 0, right = arr.length -1 , target = 5, min= arr[0] + arr[1] ;<br>        int diff = Math.abs(target - min), position_left =0, position_right = 0;<br>        while(left &lt; right){<br>            int cur = arr[left] + arr[right];<br>            if(diff &gt; Math.abs(target - cur)){<br>                position_left = left;<br>                position_right = right;<br>                diff = Math.abs(target-cur);<br>            }<br>            if (cur&lt;0){<br>                left ++;<br>            }else{<br>                right –;<br>            }<br>        }<br>        System.out.println(“The position of left: “ + arr[position_left] +<br>                “the position of right: “+arr[position_right] + “is close to the “ + target);<br>    }<br>    public static void method2(){<br>        int[] arr = {-40,-5,1,3,6,7,8,20};<br>        int left = 0, right = arr.length -1 , target = 15;<br>        ArrayList&lt;List<Integer>&gt; ls = new ArrayList&lt;&gt;();<br>        ArrayList<Integer> singleList = new ArrayList<Integer>();<br>        while(left &lt; right){<br>            int cur = arr[left] + arr[right];<br>            if(cur == target){<br>                singleList.add(arr[left]);<br>                singleList.add(arr[right]);<br>                ls.add(singleList);<br>                left ++;<br>                right –;<br>            }<br>            else if(cur&lt;target){<br>                left ++;<br>            }else{<br>                right –;<br>            }<br>        }<br>        for(List<Integer> i:ls){<br>        System.out.println(i);<br>    }<br>}</Integer></Integer></Integer></Integer></p><h1 id="2-count-occurance-of-an-array"><a href="#2-count-occurance-of-an-array" class="headerlink" title="2. count occurance of an array"></a>2. count occurance of an array</h1><p>  int[] arr = {1, 1, 1, 3, 3, 4, 5, 5, 6, 6};<br>        HashMap&lt;Integer, Integer&gt; occ = new HashMap&lt;&gt;();<br>        for (int i = 0; i &lt; arr.length; i++) {<br>            if(!occ.containsKey(arr[i])){<br>                occ.put(arr[i],1);<br>            }else{<br>                occ.put(arr[i],occ.getOrDefault(arr[i],0)  + 1);<br>            }<br>        }<br>        for (int j : occ.keySet()) {<br>            System.out.println(“Frequence of “+ j + “ is : “ + occ.get(j));<br>        }<br>    }</p><h1 id="3-find-the-largest-number-in-an-array"><a href="#3-find-the-largest-number-in-an-array" class="headerlink" title="3 find the largest number in an array"></a>3 find the largest number in an array</h1><p>   public static void main(String[] args) {<br>        int arr[] = new int[]{12,56,76,89,100,343,21,234};<br>        int largest = arr[0];<br>        int smallest = arr[0];<br>        for (int i = 0; i &lt; arr.length; i++) {<br>            if(arr[i]&gt;largest){<br>                largest = arr[i];<br>            }<br>        }<br>        System.out.println(largest);<br>    }</p><h1 id="4-Fizz-buzz"><a href="#4-Fizz-buzz" class="headerlink" title="4 Fizz buzz"></a>4 Fizz buzz</h1><p>   public static void main(String[] args) {<br>        ArrayList<Integer> q = new ArrayList&lt;&gt;();<br>        for (int i = 0; i &lt; 16; i++) {<br>            q.add(i);<br>        }<br>        ArrayList<String> result = new ArrayList&lt;&gt;();<br>        for (int i = 0; i &lt; q.size(); i++) {<br>            if(q.get(i) % 3 == 0 &amp;&amp; q.get(i) % 5 == 0){<br>                result.add(“fizz buzz”);<br>            }<br>            else if (q.get(i) % 3 == 0){<br>                result.add(“fizz”);<br>            }<br>            else if (q.get(i) % 5 == 0){<br>                result.add(“buzz”);<br>            }<br>            else {<br>                result.add(q.get(i).toString());<br>            }<br>        }<br>        for (int i = 1; i &lt; result.size(); i++) {<br>            System.out.println(result.get(i));<br>        }<br>    }</String></Integer></p><h1 id="5-missing-number-of-an-array"><a href="#5-missing-number-of-an-array" class="headerlink" title="5 missing number of an array"></a>5 missing number of an array</h1><p>   public static void main(String[] args) {<br>        int[] arr1={7,5,6,1,4,2};<br>        int[] arr2={5,3,1,2};<br>        int num = arr2.length + 1;<br>        int sum = num * ( num + 1 ) / 2;<br>        int result = sum;<br>        for (int i = 0; i &lt; arr2.length; i++) {<br>            result -= arr2[i];<br>            System.out.println(result);<br>        }</p><p>//        System.out.println(result);<br>    }</p><h1 id="6-find-odd-occurance"><a href="#6-find-odd-occurance" class="headerlink" title="6 find odd occurance"></a>6 find odd occurance</h1><p>   public static boolean method1(int num){<br>        if (num % 2 == 0){<br>            return false;<br>        }<br>        return true;<br>    }<br>   public static void main(String[] args) {<br>        int array[] = new int[]{20, 40, 50, 40, 50, 20, 30, 30, 50, 20, 40, 40, 20};<br>        HashMap&lt;Integer,Integer&gt; hs = new HashMap&lt;Integer,Integer&gt;();<br>        for (int i = 0; i &lt; array.length; i++) {<br>            if(!hs.containsKey(array[i]))<br>            {<br>                hs.put(array[i],1);<br>            }<br>            else{<br>                hs.put(array[i],hs.getOrDefault(array[i],0) + 1 );<br>            }<br>        }<br>        for(int j:hs.keySet()){<br>            if(method1(hs.get(j))) {<br>                System.out.println(j + “the frequence of it “ + hs.get(j));<br>            }<br>        }<br>       }<br>   }</p><h1 id="7-Rail-station-problems"><a href="#7-Rail-station-problems" class="headerlink" title="7 Rail station problems"></a>7 Rail station problems</h1><p>   public static void main(String[] args) {<br>        int platform_needed = 0,max_platform =0;<br>        int arr[] = {100, 140, 150, 200, 215, 400};<br>        int dep[] = {110, 300, 210, 230,315, 600};<br>        int i=0,j=0,n=6;<br>        Arrays.sort(arr);<br>        Arrays.sort(dep);<br>        while(i &lt; n &amp;&amp; j &lt; n){<br>            if(arr[i] &lt; dep[j])<br>            {<br>                platform_needed ++;<br>                i ++;<br>                if (platform_needed &gt; max_platform)<br>                    max_platform = platform_needed;<br>                System.out.println(platform_needed);<br>            }<br>            else{<br>                platform_needed –;<br>                j ++;<br>            }<br>        }<br>        System.out.println(max_platform);</p><pre><code>&#125;</code></pre><p>#8 Second largest<br>    public static void main(String args[])<br>    {<br>        int[] arr1={7,5,6,1,4,2};<br>        int secondHighest=findSecondLargestNumberInTheArray(arr1);<br>        System.out.println(“Second largest element in the array : “+ secondHighest);<br>    }<br>    public static int findSecondLargestNumberInTheArray(int array[])<br>    {<br>        int highest = 0;<br>        int secondHighest = 0;<br>        for (int i = 0; i &lt; array.length; i++) {<br>            if (array[i] &gt; highest) {<br>                secondHighest = highest;<br>                highest = array[i];<br>            } else if (array[i] &gt; secondHighest &amp;&amp; array[i]!=highest)<br>                // Just replace the second highest<br>                secondHighest = array[i];<br>        }<br>        // After exiting the loop, secondHighest now represents the second<br>        // largest value in the array<br>        return secondHighest;<br>    }</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Project1</title>
    <link href="/2021/11/08/project1/"/>
    <url>/2021/11/08/project1/</url>
    
    <content type="html"><![CDATA[<h1 id="This-is-one-of-the-projects-I-participated-in-coding-and-deisgn-The-project-is-bascially-a-Travel-Website-design-in-Java-Javascript-HTML-CSS-and-son-on-with-the-function-of-Registration-Login-Mail-validation-travel-route-Tour-details-display-Favorite-travel-route-based-on-mysql-database"><a href="#This-is-one-of-the-projects-I-participated-in-coding-and-deisgn-The-project-is-bascially-a-Travel-Website-design-in-Java-Javascript-HTML-CSS-and-son-on-with-the-function-of-Registration-Login-Mail-validation-travel-route-Tour-details-display-Favorite-travel-route-based-on-mysql-database" class="headerlink" title="This is one of the projects I participated in coding and deisgn. The project is bascially a Travel Website design in Java, Javascript, HTML, CSS and son on, with the function of Registration, Login, Mail validation, travel route,Tour details display, Favorite travel route based on mysql database."></a>This is one of the projects I participated in coding and deisgn. The project is bascially a Travel Website design in Java, Javascript, HTML, CSS and son on, with the function of Registration, Login, Mail validation, travel route,Tour details display, Favorite travel route based on mysql database.</h1><p>Technology selectives in details:<br>Front-end : HTML、CSS、JS、JQuery、Ajax, Servelet, Filter , BeanUtils, Jackson<br>Service: JavaMail, Redis, Jedis<br>Dao:Druid, JDBCutils, JDBCtemplate, Mysql<br><img src="/2021/11/08/project1/database_structure.png"></p><h2 id="The-following-I-list-is-some-of-specific-parts-that-I-am-involved-and-I-felt-tricky"><a href="#The-following-I-list-is-some-of-specific-parts-that-I-am-involved-and-I-felt-tricky" class="headerlink" title="The following I list is some of specific parts that I am involved and I felt tricky."></a>The following I list is some of specific parts that I am involved and I felt tricky.</h2><h2 id="First-Front-end-Design"><a href="#First-Front-end-Design" class="headerlink" title="First Front-end Design"></a>First Front-end Design</h2><ol><li>[Send asynchronous request]<br>![]validationcode.png<br>//The verification is passed, ajax sends the request, and the form data is submitted $(“#registerForm”).serialize()</li></ol><p>$.post(“registerUserServlet”,$(this).serialize(),function (data) {<br>    if(data.flag){<br>        //Registration is successful, jump to the successful page<br>        location.href= “register_ok.html”;<br>    }else{<br>        //If there is an error, you need to request the verification code servlet again, otherwise it will cause the verification code in the session to disappear. Although the picture exists, the code is no longer here.</p><p>//document.getElementById(“check_img”).src= “checkCode?”+new Date().getTime();<br>        //Registration failed, add prompt information to errormsg<br>        $(“#error_msg”).html(data.errorMsg);<br>    }<br>})</p><ol start="2"><li>[Verify mobile phone number format]<br>var reg_telephone = /^1(3|4|5|7|8)\d{9}$/;</li><li>[Verify mailbox format]<br>var reg_email = /^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(.[a-zA-Z0-9_-]+)+$/;</li><li>[Loss of focus event]<br>$(“#username”).blur(checkUsername);</li><li>[Front-end and back-end interaction]<br>When it comes to [front-end and back-end interaction], encapsulating information as an object.<br>public class ResultInfo implements Serializable {<br> private boolean flag; //The result returned by the backend is normally true, and false is returned if an exception occurs<br> private Object data;  //The backend returns the result data object<br> private String errorMsg; //An abnormal error message<br>}</li></ol><ol start="6"><li>[jackson]<br>import com.fasterxml.jackson.databind.ObjectMapper; //Serialize the info object to json and return to the client<br>ObjectMapper mapper = new ObjectMapper();<br>String json = mapper.writeValueAsString(info);//Write the json data back to the client side //Set content-type<br>response.setContentType(“application/json;charset=utf-8”);<br>response.getWriter().write(json);</li></ol><ol start="7"><li><p>[checkbox]<br>When the value attribute is not specified, the passed value is on! ! !</p></li><li><p>[Get the splicing parameters in the url]<br>//Acquire the corresponding value according to the passed parameter name<br>function getParameter(name) {<br> var reg = new RegExp(“(^|&amp;)” + name + “=([^&amp;]*)(&amp;|$)”,”i”);<br> var r = location.search.substr(1).match(reg);<br> if (r!=null) return (r[2]); return null;<br>}</p></li></ol><h2 id="Second-the-use-of-tools"><a href="#Second-the-use-of-tools" class="headerlink" title="Second, the use of tools"></a>Second, the use of tools</h2><p>Use [MailUtils] to complete the email sending, but you have to apply to open the service in the email settings.<br>Use [uuid tools] to complete the generation of random activation codes.<br>Use [JedisUtils] to complete the acquisition of the redis client to operate the redis database.<br>Use [JDBCUtils] to encapsulate the druid connection pool and return the data source object.<br><img src="/2021/11/08/project1/jdbc.png"></p><h2 id="Third-servelet-distribution-ideas"><a href="#Third-servelet-distribution-ideas" class="headerlink" title="Third, servelet distribution ideas"></a>Third, servelet distribution ideas</h2><p>Refer to the service method of HttpServlet to distribute the request method, corresponding to different methods, completing different functions similar to Servlet, which really benefited a lot. Looking back and thinking about the original need to define so many and so many Servlets, now they are completely encapsulated. In a UserServlet, great.</p><p>[Distribute Servlet]<br><img src="/2021/11/08/project1/Base_Servlet.png"></p><h2 id="Fourth-the-function-of-the-header-loading-data-from-mysql"><a href="#Fourth-the-function-of-the-header-loading-data-from-mysql" class="headerlink" title="Fourth, the function of the header loading data from mysql"></a>Fourth, the function of the header loading data from mysql</h2><p><img src="/2021/11/08/project1/Category1.png"></p><p>The DAO layer is shown below, using the JDBC template loading data from my database and then update to service layer.<br><img src="/2021/11/08/project1/2.png"></p><p>In the service layer, data is using the jedis in order to reduce the traffic volume and return in a list to servlet layer.<br><img src="/2021/11/08/project1/3.png"></p><p>The will be wrapped in the function as Json and interact with the html.<br><img src="/2021/11/08/project1/4.png"></p><p>And the front page will load the data from database.<br><img src="/2021/11/08/project1/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5G Introduction</title>
    <link href="/2021/11/06/5G/"/>
    <url>/2021/11/06/5G/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-5G"><a href="#What-is-5G" class="headerlink" title="What is 5G?"></a>What is 5G?</h1><p>As we know, 5G has almost nothing to do with classic mobile communications unlike previous technologies such as 4G, there is no strandard 5G network. It is not just an evolution of previous technologies; it is a whole set of new networks accompany with the development of software.The description about might make the whole topic a bit confusing, but the prospects for the 5G standard are good. The maximum speed of up to 20 GB/s, minimized signal propagation time (delay), and many simultaneous mobile devices in each area make all wireless experiences look instantaneous and open the door to new applications. For some of us, nothing will change except for faster video streaming and a more realistic gaming experience, but in the meantime, unidentified use cases are being developed.</p><p>So, what is 5G? In order to take advantage of this technology, what do designers and engineers need to know?</p><p>5G standardization process<br>5G is a general term covering various networks, technologies and applications. It is the standardization of mobile communications. The name 5G was created by the International Telecommunication Union (ITU) as the “fifth generation mobile communication system.” To this end, the standardization organization Third Generation Partnership Project (3GPP) is advancing its 5G implementation through the International Mobile Telecommunications (IMT-2020) program. At the same time, other standardization bodies, including the Institute of Electrical and Electronics Engineers (IEEE) and the International Telecommunication Union, are working on 5G specifications. At the end of 2019, the standardization process was completed, and we are now seeing more and more applications being commercialized.</p><p>Different applications require different antennas</p><p>New communication standards involve many applications, and 5G mobile communication has multiple frequency ranges to consider. Generally, 5G mobile networks can operate at various frequencies, so different antennas need to be used for different frequency bands.<br>5G infographic, 5G applications allocated along the radio wave spectrum<br>5G frequency, range and applications<br>The situation becomes clearer when we pick some 5G frequency bands from the so-called multi-layer spectrum and align them with the application.</p><p>Coverage area: Less than 2 GHz (eg 700 MHz) is suitable for indoor and wider coverage areas, because electromagnetic waves of this wavelength can travel long distances and pass through objects.</p><p>C-Band: 2-6 GHz combines coverage, capacity and the so-called “super data layer”. Frequencies greater than 6 GHz (for example, 24-29 GHz and 37-43 GHz) provide high bandwidth, but require a direct line of sight because even the leaves on the tree can block connections.</p><p>Since various frequencies are used to transmit signals for different applications, special antennas and antenna concepts are required. Therefore, the change in the frequency band used for communication is one of the reasons why we see more antennas. The particularity of New Radio (NR) and the need for signal line-of-sight is another reason why we see more antennas.</p><p>5G NR works differently from 4G</p><p>As the demand for frequencies continues to grow, federal communications agencies (such as the FCC in the United States) are reallocating free or idle frequency ranges. Through re-framing, the frequencies that have been allocated for 5G have been licensed for operation. Therefore, network operators can freely decide which mobile communication technology they want to use.<br>After the expiration of the UMTS frequencies in the 2 GHz band at the end of 2020 and 2025, these frequencies will be allowed to be allocated to 5G from 2021 to 2026 (60 MHz in total).<br>Worldwide, WiMax technology has left an unused 3.5 GHz frequency band. Therefore, by 2022, the 3.6 GHz band will provide a bandwidth of 300 MHz, and the frequency range will be between 3.7 and 3.8 GHz.<br>NR uses the mmWave range (millimeter wave), which starts at 24 GHz and extends to 52.6 GHz. Parts in the 64 to 86 GHz range may be added in the future.<br>However, due to the physical propagation conditions of radio signals, most frequencies used for 5G (3.5 GHz, 26 GHz and above) are only suitable for short distances. However, these frequency ranges have high bandwidth potential. Low-power base stations called femtocells can be used to operate mobile radio hotspots at very high data rates. This means that more base stations are needed. Therefore, at some point, street lights may not only provide light, but also provide access to the mobile gigabit Internet by hosting femtocell base stations.</p><p>5G new radio infographic, comparison of 4G network base stations and 5G urban installations with active directional antennas.<br>4G networks are compared to 5G urban installations with active directional antennas.<br>The antenna is no longer like an antenna<br>The higher frequencies of 5G are very useful for many reasons, one of the most important of which is their huge capacity to support fast data. They have strong directionality and can be used correctly</p>]]></content>
    
    
    <categories>
      
      <category>5G</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>String_Question</title>
    <link href="/2021/08/14/String_Question/"/>
    <url>/2021/08/14/String_Question/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Find-the-anagram-String"><a href="#1-Find-the-anagram-String" class="headerlink" title="1 Find the anagram_String"></a>1 Find the anagram_String</h1><p>public class anagram_string {<br>    String a = “Angel”;<br>    String b = “Angle”;<br>    public void method1(){<br>        System.out.println(method_compare(a,b));<br>    }<br>    public boolean method_compare(String a,String b){<br>        if (a.length() != b.length()){<br>            return false;<br>        }<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            char c = a.charAt(i);<br>            if (b.indexOf(c) != -1){<br>//                b = b.substring(0,b.indexOf(c)) + b.substring(b.indexOf(c)+1);<br>                b = b.replace(“c”,””);<br>            }<br>            else{<br>                return false;<br>            }<br>        }<br>        return true;<br>    }<br>    public void method2(){<br>        System.out.println(compared(a,b));<br>    }<br>    public static boolean compared(String a, String b){<br>        String element1 = sorted(a);<br>        String element2 = sorted(b);<br>        if (element1.equals(element2)){<br>            return true;<br>        }<br>        return false;<br>    }<br>    public static String sorted(String word){<br>        char[] arr = word.toCharArray();<br>        Arrays.sort(arr);<br>//        System.out.println(arr);<br>        return String.valueOf(arr);<br>    }<br>    public static void main(String[] args) {<br>        anagram_string a = new anagram_string();<br>        a.method1();<br>//        String c = “abcdefg”;<br>//        System.out.println(c.substring(0,3));<br>        a.method2();<br>    }<br>}</p><h1 id="2-Find-the-duplicate-character"><a href="#2-Find-the-duplicate-character" class="headerlink" title="2.Find the duplicate character"></a>2.Find the duplicate character</h1><p>   public static void main(String[] args) {<br>        String str = “java2”;<br>        HashMap&lt;Character,Integer&gt; charCountMap = new HashMap();<br>        for (int i = 0; i &lt; str.length(); i++) {<br>            char c = str.charAt(i);<br>            if (charCountMap.containsKey(c)) {<br>                charCountMap.put(c, charCountMap.get(c) + 1);<br>            } else {<br>                charCountMap.put(c, 1);<br>            }<br>        }<br>        for (Character c : charCountMap.keySet()) {<br>            if (charCountMap.get(c) &gt; 1)<br>                System.out.println(“duplicate character : “ + c + “ ====== “ + “ count : “ + charCountMap.get(c));<br>        }<br>    }</p><h1 id="3-Find-the-substring"><a href="#3-Find-the-substring" class="headerlink" title="3.Find the substring"></a>3.Find the substring</h1><p> public static void main(String[] args) {<br>        String a = “abcdef”;<br>        String result = “”;<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            for (int j = i+1; j &lt;= a.length(); j++) {<br>                System.out.println(a.substring(i,j));<br>            }<br>        }<br>    }</p><h1 id="4-Find-the-none-repeated-character"><a href="#4-Find-the-none-repeated-character" class="headerlink" title="4.Find the none-repeated character"></a>4.Find the none-repeated character</h1><p>public static void main(String[] args) {<br>        String a = “easiest”;<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            Character c = a.charAt(i);<br>            if(a.indexOf(c) == a.lastIndexOf(c))<br>            {<br>                System.out.println(a.charAt(i));<br>                break;<br>            }<br>        }<br>    }</p><h1 id="5-Find-the-Parlindrome"><a href="#5-Find-the-Parlindrome" class="headerlink" title="5. Find the Parlindrome"></a>5. Find the Parlindrome</h1><p>   public static void main(String[] args) {<br>        System.out.println(method());<br>    }<br>    public static boolean method() {<br>        String a = “A man, a plan, a canal:Panama”;<br>        int left = 0, right = a.length() - 1;<br>        while (left &lt; right) {<br>            while (left &lt; right &amp;&amp; !(helper(a.charAt(left)))) {<br>                left++;<br>            }<br>            while (left &lt; right &amp;&amp; !(helper(a.charAt(right)))) {<br>                right–;<br>            }</p><p>//            if (left &gt;= right) {<br>//                return true;<br>//            }<br>            if (Character.toLowerCase(a.charAt(left)) !=<br>                    Character.toLowerCase(a.charAt(right))) {<br>                return false;<br>            } else {<br>                left++;<br>                right–;<br>            }<br>        }return true;<br>    }<br>//        for (int i = 0; i &lt; a.length(); i++) {<br>//            if(helper(a.charAt(i))){<br>//                b += a.charAt(i);<br>//                }<br>//            }<br>//        System.out.println(b);<br>    public static boolean helper(Character f){<br>        return  (Character.isLetter(f) || Character.isDigit(f));<br>    }<br>}</p><h1 id="6-Find-the-permutation-of-String"><a href="#6-Find-the-permutation-of-String" class="headerlink" title="6 Find the permutation of String"></a>6 Find the permutation of String</h1><p>public static void main(String[] args) {<br>            Set set=permutationOfString(“ABC”);        //ABC stores the set<br>            System.out.println(“Permutations of String ABC are:”);<br>            for (Iterator iterator = set.iterator(); iterator.hasNext();) {<br>                String string = (String) iterator.next();<br>                System.out.println(string);<br>            }<br>        }<br>        public static Set permutationOfString(String str)<br>        {<br>            Set<String> permutationSet=new HashSet();<br>            if(str.length()==0)<br>            {<br>                permutationSet.add(“”);<br>                return permutationSet;<br>            }<br>            // take out first character of String<br>            char c=str.charAt(0);<br>            // Remaining String<br>            String rem=str.substring(1);<br>            Set<String> permutatedSetForRemainingString=permutationOfString(rem);<br>            for (String permutedString: permutatedSetForRemainingString) {<br>                for (int j = 0; j &lt;= permutedString.length(); j++) {<br>                    String permutation=insertFirstCharAtDiffPlaces(permutedString,c,j);<br>                    permutationSet.add(permutation);<br>                }<br>            }<br>            return permutationSet;<br>        }<br>        public static String insertFirstCharAtDiffPlaces(String perm,char firstChar,int index)<br>        {<br>            // Inserting firstCharacter of orig String at difference places based on index<br>            return perm.substring(0,index)+firstChar+perm.substring(index);<br>        }<br>    }</String></String></p><h1 id="7-Reverse-a-string"><a href="#7-Reverse-a-string" class="headerlink" title="7 Reverse a string"></a>7 Reverse a string</h1><p>public static void method1(){<br>        String a = “abcdefg”;<br>        String result = “”;<br>        for (int i = a.length()-1; i &gt;= 0; i–) {<br>            result = result + a.charAt(i);<br>        }<br>        System.out.println(result);<br>    }<br>    public static void method2(){<br>        String a  = “abcdefg”;<br>        StringBuffer aa = new StringBuffer(a);<br>        System.out.println(aa.reverse());<br>    }<br>    public String recursiveReverse(String orig) {<br>        if (orig.length() == 1)<br>            return orig;<br>        else<br>            return orig.charAt(orig.length() - 1) +<br>                    recursiveReverse(orig.substring(0, orig.length() - 1));<br>    }<br>    public static void main(String[] args) {<br>        reverse_string a = new reverse_string();<br>        a.method1();<br>        a.method2();<br>        String blogName = “java2blog”;<br>        String reverse = a.recursiveReverse(blogName);<br>        System.out.println(“Reverse of java2blog is:” + reverse);<br>    }</p><h1 id="8-Check-rotation-of-a-string"><a href="#8-Check-rotation-of-a-string" class="headerlink" title="8 Check rotation of a string"></a>8 Check rotation of a string</h1><p>public class Rotation {<br>    public static boolean method(String st1, String st2){<br>        String st3 = st1 + st1;<br>        if(st3.contains((st2))){<br>            return true;<br>        }<br>        return false;<br>    }<br>    public static void main(String[] args) {<br>        Scanner sc = new Scanner(System.in);<br>        System.out.println(“please input the first string”);<br>        String st1 = sc.nextLine();<br>        System.out.println(“please input the sec string”);<br>        String st2 = sc.nextLine();<br>        Rotation aa = new Rotation();<br>        System.out.println(aa.method(st1,st2));<br>    }<br>}</p><h1 id="9-unique-character-or-not"><a href="#9-unique-character-or-not" class="headerlink" title="9 unique character or not"></a>9 unique character or not</h1><p>public class Unique_or_not {<br>    String a = “ifijk”;<br>    public boolean method() {<br>        HashSet<Character> strings = new HashSet&lt;&gt;();<br>        for (int i = 0; i &lt; a.length() - 1; i++) {<br>            char c = a.charAt(i);<br>            if (!strings.add(c)) {<br>                return false;<br>            }<br>        }<br>        return true;<br>    }<br>    public boolean method2(){<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            char c = a.charAt(i);<br>            if(a.indexOf(c)!=a.lastIndexOf(c)){<br>                return false;<br>            }<br>        }<br>        return true;<br>    }<br>    public static void main(String[] args) {<br>        Unique_or_not test = new Unique_or_not();<br>        System.out.println(test.method());<br>        System.out.println(test.method2());<br>    }</Character></p><p>}</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
