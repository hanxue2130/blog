<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Database Questions</title>
    <link href="/2022/04/18/Database%20Questions/"/>
    <url>/2022/04/18/Database%20Questions/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-the-primary-key"><a href="#What-is-the-primary-key" class="headerlink" title="What is the primary key?"></a>What is the primary key?</h1><p>the column or columns that contain values that uniquely identify each row in a table<br> A primary key is used to ensure data in the specific column is unique</p><h1 id="What-is-a-Foreign-key"><a href="#What-is-a-Foreign-key" class="headerlink" title="What is a Foreign key?"></a>What is a Foreign key?</h1><p>A foreign key is a column or a set of columns in a table whose values correspond to the values of the primary key in another table. </p><h1 id="What-is-the-difference-between-primary-key-and-foreign-key"><a href="#What-is-the-difference-between-primary-key-and-foreign-key" class="headerlink" title="What is the difference between primary key and foreign key?"></a>What is the difference between primary key and foreign key?</h1><p>A primary key is used to ensure data in the specific column is unique. A foreign key is a column or group of columns in a relational database table that provides a link between data in two tables. It uniquely identifies a record in the relational database table.</p><p>SQL command used to retrieve data</p><p>SQL Select. SQL select statements are used to retrieve data from SQL databases.</p><h1 id="What-is-normalization-and-SQL"><a href="#What-is-normalization-and-SQL" class="headerlink" title="What is normalization and SQL?"></a>What is normalization and SQL?</h1><p>Normalization is a database design technique that reduces data redundancy and eliminates undesirable characteristics like Insertion, Update and Deletion Anomalies. Normalization rules divides larger tables into smaller tables and links them using relationships. The purpose of Normalisation in SQL is to eliminate redundant (repetitive) data and ensure data is stored logically.</p><h1 id="What-is-group-by-in-SQL"><a href="#What-is-group-by-in-SQL" class="headerlink" title="What is group by in SQL?"></a>What is group by in SQL?</h1><p>The GROUP BY statement groups rows that have the same values into summary rows, like “find the number of customers in each country”. The GROUP BY statement is often used with aggregate functions ( COUNT() , MAX() , MIN() , SUM() , AVG() ) to group the result-set by one or more columns.</p><h1 id="How-to-create-many-to-many-relationship-in-a-DBMS"><a href="#How-to-create-many-to-many-relationship-in-a-DBMS" class="headerlink" title="How to create many to many relationship in a DBMS?"></a>How to create many to many relationship in a DBMS?</h1><p>When you need to establish a many-to-many relationship between two or more tables, the simplest way is to use a Junction Table. </p><h1 id="What-are-the-different-types-of-joins-in-SQL"><a href="#What-are-the-different-types-of-joins-in-SQL" class="headerlink" title="What are the different types of joins in SQL?"></a>What are the different types of joins in SQL?</h1><p>(INNER) JOIN: Returns records that have matching values in both tables<br>LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table<br>RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table<br>FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table</p><h1 id="What-is-3rd-normal-form"><a href="#What-is-3rd-normal-form" class="headerlink" title="What is 3rd normal form"></a>What is 3rd normal form</h1><p>Third normal form (3NF) is a database schema design approach for relational databases which uses normalizing principles to reduce the duplication of data, avoid data anomalies, ensure referential integrity, and simplify data management.</p><p>A relation that is in First and Second Normal Form and in which no non-primary-key attribute is transitively dependent on the primary key, then it is in Third Normal Form (3NF). Note – If A-&gt;B and B-&gt;C are two FDs then A-&gt;C is called transitive dependency.</p><p>SQL query to find unique elements from table</p><p>The SELECT DISTINCT statement is used to return only distinct (different) values. Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.</p><p>Difference in primary key and candidate key</p><p> but it can have one key per table or many keys per table</p><h1 id="What-is-normalization-in-SQL"><a href="#What-is-normalization-in-SQL" class="headerlink" title="What is normalization in SQL"></a>What is normalization in SQL</h1><p>Normalization is the process to eliminate data redundancy and enhance data integrity in the table. Normalization also helps to organize the data in the database. It is a multi-step process that sets the data into tabular form and removes the duplicated data from the relational tables.</p><h1 id="How-to-update-query"><a href="#How-to-update-query" class="headerlink" title="How to update query"></a>How to update query</h1><p>UPDATE table_name<br>SET column1 = value1, column2 = value2, …<br>WHERE condition;</p><h1 id="What-is-join-query-syntax"><a href="#What-is-join-query-syntax" class="headerlink" title="What is join query syntax"></a>What is join query syntax</h1><p>SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate<br>FROM Orders<br>INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;</p><h1 id="How-to-reduce-redundancy-in-database"><a href="#How-to-reduce-redundancy-in-database" class="headerlink" title="How to reduce redundancy in database"></a>How to reduce redundancy in database</h1><p>For example, you moved your customer data into a new database but forgot to delete the same from the old one. In such a scenario, you will have the same data sitting in two places, just taking up the storage space. To reduce data redundancy, always delete databases that are no longer required.</p><h1 id="What-are-ACID-properties"><a href="#What-are-ACID-properties" class="headerlink" title="What are ACID properties"></a>What are ACID properties</h1><p>In computer science, ACID is a set of properties of database transactions intended to guarantee data validity despite errors, power failures, and other mishaps. In the context of databases, a sequence of database operations that satisfies the ACID properties is called a transaction.</p><h1 id="What-is-deletion-anomaly"><a href="#What-is-deletion-anomaly" class="headerlink" title="What is deletion anomaly"></a>What is deletion anomaly</h1><p>A delete anomaly is the opposite of an insert anomaly. When a delete anomaly occurs it means that you cannot delete data from the table without having to delete the entire record.</p><p>A deletion anomaly occurs when you delete a record that may contain attributes that shouldn’t be deleted. For instance, if we remove information about the last account at a branch, such as account A-101 at the Downtown branch in Figure 10.4, all of the branch information disappears.</p><p>The problem with deleting the A-101 row is we don’t know where the Downtown branch is located and we lose all information regarding customer 1313131. To avoid these kinds of update or deletion problems, we need to decompose the original table into several smaller tables where each table has minimal overlap with other tables.</p><p>Examples of bank account tables that contain one entity each, by A. Watt.<br>Following this practice will ensure that when branch information is added or updated it will only affect one record. So, when customer information is added or deleted, the branch information will not be accidentally modified or incorrectly recorded.</p><h1 id="Difference-between-ddl-and-dml"><a href="#Difference-between-ddl-and-dml" class="headerlink" title="Difference between ddl and dml"></a>Difference between ddl and dml</h1><p>DDL stands for Data Definition Language. DML stands for Data Manipulation Language. DDL statements are used to create database, schema, constraints, users, tables etc. DML statement is used to insert, update or delete the records.</p><h1 id="Difference-between-TRUNCATE-and-DELETE-statements-in-SQL"><a href="#Difference-between-TRUNCATE-and-DELETE-statements-in-SQL" class="headerlink" title="Difference between TRUNCATE and DELETE statements in SQL"></a>Difference between TRUNCATE and DELETE statements in SQL</h1><p>DELETE is a SQL command that removes one or multiple rows from a table using conditions. TRUNCATE is a SQL command that removes all the rows from a table without using any condition. It is a DML(Data Manipulation Language) command. It is a DDL(Data Definition Language) command.</p><h1 id="How-many-primary-and-foreign-keys-we-can-create-in-a-table"><a href="#How-many-primary-and-foreign-keys-we-can-create-in-a-table" class="headerlink" title="How many primary and foreign keys we can create in a table?"></a>How many primary and foreign keys we can create in a table?</h1><p>1 primary key and 1 or more than 1 primary key</p><p>Write a query to fetch the name of the employee with the second highest salary?</p><p>select name from employee order by desc limit 2  order by asc limit 1”</p><h1 id="What-is-the-difference-between-delete-drop-and-truncate"><a href="#What-is-the-difference-between-delete-drop-and-truncate" class="headerlink" title="What is the difference between delete, drop and truncate?"></a>What is the difference between delete, drop and truncate?</h1><p>Basically, it is a Data Manipulation Language Command (DML). It is used to delete one or more tuples of a table. With the help of the “DELETE” command, we can either delete all the rows in one go or can delete rows one by one. i.e., we can use it as per the requirement or the condition using the Where clause. It is comparatively slower than the TRUNCATE command. The TRUNCATE command does not remove the structure of the table.</p><p>It is a Data Definition Language Command (DDL). It is used to drop the whole table. With the help of the “DROP” command we can drop (delete) the whole structure in one go i.e. it removes the named elements of the schema. By using this command the existence of the whole table is finished or say los</p><p>It is also a Data Definition Language Command (DDL). It is used to delete all the rows of a relation (table) in one go. With the help of the “TRUNCATE” command, we can’t delete the single row as here WHERE clause is not used. By using this command the existence of all the rows of the table is lost. It is comparatively faster than the delete command as it deletes all the rows fast. </p><h1 id="What-are-views-and-indexes-in-DBMS"><a href="#What-are-views-and-indexes-in-DBMS" class="headerlink" title="What are views and indexes in DBMS?"></a>What are views and indexes in DBMS?</h1><p>A view is just a way of abbreviating a subquery. An index is used to optimize matching column data.</p><h1 id="How-to-add-Constraints-for-an-existing-table-Syntax"><a href="#How-to-add-Constraints-for-an-existing-table-Syntax" class="headerlink" title="How to add Constraints for an existing table (Syntax)"></a>How to add Constraints for an existing table (Syntax)</h1><p>ALTER TABLE Persons<br>ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);</p><p>Explain DML Operations</p><p>DML (Data Manipulation Language) statements are the element in the SQL language that is used for data retrieval and manipulation<br>DDL(Data Definition language)</p><h1 id="What-is-a-composite-key"><a href="#What-is-a-composite-key" class="headerlink" title="What is a composite key?"></a>What is a composite key?</h1><p>In database design, a composite key is a candidate key that consists of two or more attributes (table columns) that together uniquely identify an entity occurrence (table row). </p><h1 id="How-to-add-and-Drop-a-Foreign-key"><a href="#How-to-add-and-Drop-a-Foreign-key" class="headerlink" title="How to add and Drop a Foreign key?"></a>How to add and Drop a Foreign key?</h1><p>You can drop a foreign key constraint using the following ALTER TABLE syntax: ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol; If the FOREIGN KEY clause defined a CONSTRAINT name when you created the constraint, you can refer to that name to drop the foreign key constraint.</p><h1 id="Explain-joins"><a href="#Explain-joins" class="headerlink" title="Explain joins?"></a>Explain joins?</h1><p>JOINS in SQL are commands which are used to combine rows from two or more tables, based on a related column between those tables. There are predominantly used when a user is trying to extract data from tables which have one-to-many or many-to-many relationships between them.</p><h1 id="What-happens-if-you-use-inner-join-with-no-conditions"><a href="#What-happens-if-you-use-inner-join-with-no-conditions" class="headerlink" title="What happens if you use inner join with no conditions?"></a>What happens if you use inner join with no conditions?</h1><p>We can use ‘cross join’ without on condition. Cross join gives the result in cartesian product form. For instance, if in one table there are 3 records and another table has 2 records, then the first record will match with all the second table records. Then, the same process will be repeated for second record and so on.</p><h1 id="What-is-Stored-Procedure"><a href="#What-is-Stored-Procedure" class="headerlink" title="What is Stored Procedure?"></a>What is Stored Procedure?</h1><p>The stored procedure is SQL statements wrapped within the CREATE PROCEDURE statement. The stored procedure may contain a conditional statement like IF or CASE or the Loops. The stored procedure can also execute another stored procedure or a function that modularizes the code.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA Question Collection</title>
    <link href="/2022/04/06/JAVA%20Question%20Collection/"/>
    <url>/2022/04/06/JAVA%20Question%20Collection/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-java"><a href="#What-is-java" class="headerlink" title="What is java"></a>What is java</h1><p>Roubust<br>Jvm<br>Well-structure</p><h1 id="What-is-closure-in-Java-script"><a href="#What-is-closure-in-Java-script" class="headerlink" title="What is closure in Java script?"></a>What is closure in Java script?</h1><p>A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain.</p><h1 id="Is-Java-pass-by-reference-or-pass-by-value"><a href="#Is-Java-pass-by-reference-or-pass-by-value" class="headerlink" title="Is Java pass-by-reference or pass-by-value?"></a>Is Java pass-by-reference or pass-by-value?</h1><h1 id="can-a-method-be-private-in-an-interface-class"><a href="#can-a-method-be-private-in-an-interface-class" class="headerlink" title="can a method be private in an interface class?"></a>can a method be private in an interface class?</h1><p>Private methods can be implemented static or non-static. This means that in an interface we are able to create private methods to encapsulate code from both default and static public method signatures.</p><h1 id="Tell-me-about-Access-Modifier"><a href="#Tell-me-about-Access-Modifier" class="headerlink" title="Tell me about Access Modifier"></a>Tell me about Access Modifier</h1><p>For classes, you can use either public or default:<br>public        The class is accessible by any other class<br>default        The class is only accessible by classes in the same package. This is used when you don’t specify a modifier.<br>For attributes, methods and constructors, you can use the one of the following:<br>public        The code is accessible for all classes<br>private        The code is only accessible within the declared class<br>default        The code is only accessible in the same package. This is used when you don’t specify a modifier.<br>protected The code is accessible in the same package and subclasses. </p><h1 id="Static-keyword-related-questions"><a href="#Static-keyword-related-questions" class="headerlink" title="Static keyword related questions"></a>Static keyword related questions</h1><p>Static is a Non-Access Modifier. Static can be applied to variable, method, nested class and initialization blocks (static block).</p><p>A Static variable gets memory allocated only once during the time of class loading.</p><p>A static method can access static variables directly and it cannot access non-static variables and can only call a static method directly and it cannot call a non-static method from it.</p><p>Only the main() method which is static will be called by the JVM automatically, Not all the static method will be called automatically.</p><h1 id="When-would-you-use-overloading-or-overriding"><a href="#When-would-you-use-overloading-or-overriding" class="headerlink" title="When would you use overloading or overriding?"></a>When would you use overloading or overriding?</h1><p>With method overloading, multiple methods can have the same name with different parameters<br>If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.</p><p>What is the difference between = and ==?</p><h1 id="What-is-the-difference-between-an-interface-and-an-abstract"><a href="#What-is-the-difference-between-an-interface-and-an-abstract" class="headerlink" title="What is the difference between an interface and an abstract?"></a>What is the difference between an interface and an abstract?</h1><h1 id="Can-there-be-multiple-inheritances-in-Java"><a href="#Can-there-be-multiple-inheritances-in-Java" class="headerlink" title="Can there be multiple inheritances in Java?"></a>Can there be multiple inheritances in Java?</h1><p>The Java programming language supports multiple inheritance of type, which is the ability of a class to implement more than one interface. An object can have multiple types: the type of its own class and the types of all the interfaces that the class implements.</p><h1 id="What-is-a-string-in-java"><a href="#What-is-a-string-in-java" class="headerlink" title="What is a string in java?"></a>What is a string in java?</h1><p>Strings, which are widely used in Java programming, are a sequence of characters. In the Java programming language, strings are objects. </p><h1 id="What-is-OOP"><a href="#What-is-OOP" class="headerlink" title="What is OOP?"></a>What is OOP?</h1><p>OOP concepts include abstraction, encapsulation, inheritance and polymorphism. Basically, Java OOP concepts let us create working methods and variables, then re-use all or part of them without compromising security.</p><h1 id="What-are-the-four-pillars-of-object-oriented-programming"><a href="#What-are-the-four-pillars-of-object-oriented-programming" class="headerlink" title="What are the four pillars of object oriented programming?"></a>What are the four pillars of object oriented programming?</h1><p>Abstraction.<br>Encapsulation.<br>Inheritance.<br>Polymorphism.</p><h1 id="What-is-a-class"><a href="#What-is-a-class" class="headerlink" title="What is a class"></a>What is a class</h1><p>A class is a template or blueprint from which objects are created.<br>A  class describes the contents of the objects that belong to it: </p><h1 id="What-is-object"><a href="#What-is-object" class="headerlink" title="What is object"></a>What is object</h1><p>An object is the instance(result) of a class.<br>The state of an object is stored in fields (variables), while methods (functions) display the object’s behaviour</p><h1 id="What-is-interface"><a href="#What-is-interface" class="headerlink" title="What is interface"></a>What is interface</h1><p>Another way to achieve abstraction in Java, is with interfaces.<br>An interface is a completely “abstract class” that is used to group related methods with empty bodies:</p><h1 id="What-is-static-keyword"><a href="#What-is-static-keyword" class="headerlink" title="What is static keyword"></a>What is static keyword</h1><p>Static methods are associated with the class that means these methods can be called with the class name or with objects or without objects(Direct call) there is no need to declare any objects for static methods.<br> a static method can be overloaded, but can not be overridden in Java.</p><h1 id="What-is-polymorphism"><a href="#What-is-polymorphism" class="headerlink" title="What is polymorphism?"></a>What is polymorphism?</h1><p>Polymorphism is one of the OOPs feature that allows us to perform a single action in different ways.</p><h1 id="What-are-two-forms-of-polymorphism-in-Java"><a href="#What-are-two-forms-of-polymorphism-in-Java" class="headerlink" title="What are two forms of polymorphism in Java?"></a>What are two forms of polymorphism in Java?</h1><p>There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism<br>Method overloading is the compile-time polymorphism where more than one methods share the same name with different parameters or signature and different return type.<br>Method overriding is the runtime polymorphism having same method with same parameters or signature, but associated in different classes. </p><h1 id="hat-is-static-variable"><a href="#hat-is-static-variable" class="headerlink" title="hat is static variable?"></a>hat is static variable?</h1><p>In Java, static variables are also called class variables. That is, they belong to a class and not a particular instance. As a result, class initialization will initialize static variables. In contrast, a class’s instance will initialize the instance variables (non-static variables).</p><h1 id="What-is-Encapsulation"><a href="#What-is-Encapsulation" class="headerlink" title="What is Encapsulation?"></a>What is Encapsulation?</h1><p>Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.</p><h1 id="What-is-Inheritance"><a href="#What-is-Inheritance" class="headerlink" title="What is Inheritance?"></a>What is Inheritance?</h1><p>Inheritance in Java is a mechanism in which one object acquires all the properties and behaviours of a parent object. </p><h1 id="What-is-Abstraction"><a href="#What-is-Abstraction" class="headerlink" title="What is Abstraction?"></a>What is Abstraction?</h1><p>The abstract keyword is a non-access modifier, used for classes and methods: Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). Abstract method: can only be used in an abstract class, and it does not have a body.</p><h1 id="What-is-the-difference-between-final-and-static"><a href="#What-is-the-difference-between-final-and-static" class="headerlink" title="What is the difference between final and static?"></a>What is the difference between final and static?</h1><p> the class member that can be used independently of any object of the class. In contrast<br> final is used to declare a constant variable or a method that cannot be overridden or a class that cannot be inherited.</p><h1 id="What-is-deadlock-and-how-to-avoid-it"><a href="#What-is-deadlock-and-how-to-avoid-it" class="headerlink" title="What is deadlock and how to avoid it?"></a>What is deadlock and how to avoid it?</h1><p>Deadlock describes a situation where two or more threads are blocked forever, waiting for each other. Deadlock occurs when multiple threads need the same locks but obtain them in different order.<br>Avoid Nested Locks: A deadlock mainly happens when we give locks to multiple threads. Avoid giving a lock to multiple threads if we already have given to one.<br>Avoid Unnecessary Locks: We can have a lock only those members which are required. Having a lock unnecessarily can lead to a deadlock.<br> Using Thread.join(): A deadlock condition appears when one thread is waiting other to finish. If this condition occurs we can use Thread.join() with the maximum time the execution will take.</p><h1 id="What-is-Method-Overloading-and-Method-Overriding"><a href="#What-is-Method-Overloading-and-Method-Overriding" class="headerlink" title="What is Method Overloading and Method Overriding?"></a>What is Method Overloading and Method Overriding?</h1><p>When two or more methods in the same class have the same name but different parameters, it’s called Overloading. When the method signature (name and parameters) are the same in the superclass and the child class, it’s called Overriding.</p><h1 id="What-is-Static-in-java"><a href="#What-is-Static-in-java" class="headerlink" title="What is Static in java?"></a>What is Static in java?</h1><p>In the Java programming language, the keyword static means that the particular member belongs to a type itself, rather than to an instance of that type. This means we’ll create only one instance of that static member that is shared across all instances of the class.</p><p>What is Encapsulation </p><p>Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. </p><h1 id="What-is-interfaces"><a href="#What-is-interfaces" class="headerlink" title="What is interfaces"></a>What is interfaces</h1><p>An Interface in Java programming language is defined as an abstract type used to specify the behavior of a class. An interface in Java is a blueprint of a class. A Java interface contains static constants and abstract methods. The interface in Java is a mechanism to achieve abstraction.</p><h1 id="Why-there-are-no-pointers-in-Java"><a href="#Why-there-are-no-pointers-in-Java" class="headerlink" title="Why there are no pointers in Java?"></a>Why there are no pointers in Java?</h1><p>Java do not use pointers because using pointer the memory area can be directly accessed, which is a security issue. pointers need so memory spaces at the runtime. to reduce the usage of memory spaces java does not support pointers.</p><h1 id="How-memory-allocation-in-Java-takes-place"><a href="#How-memory-allocation-in-Java-takes-place" class="headerlink" title="How memory allocation in Java takes place?"></a>How memory allocation in Java takes place?</h1><p>The Java Virtual Machine divides the memory into Stack and Heap Memory. For Java Virtual Machine, executing an application in its maximum potential can happen from stack and heap memory. Every time a new variable or object is declared, the memory allocates memory dedicated to such operations.</p><h1 id="What-is-Encapsulation-1"><a href="#What-is-Encapsulation-1" class="headerlink" title="What is Encapsulation?"></a>What is Encapsulation?</h1><p> Encapsulation refers to the bundling of fields and methods inside a single class. It prevents outer classes from accessing and changing fields and methods of a class. This also helps to achieve data hiding.</p><h1 id="What-is-cache"><a href="#What-is-cache" class="headerlink" title="What is cache?"></a>What is cache?</h1><p>The cache remembers parts of pages, like images, to help them open faster during your next visit.<br>A cache is an area of local memory that holds a copy of frequently accessed data that is otherwise expensive to get or compute. Examples of such data include a result of a query to a database, a disk file or a report.</p><h1 id="What-is-SDLC"><a href="#What-is-SDLC" class="headerlink" title="What is SDLC?"></a>What is SDLC?</h1><p>Requirement analysis<br>Planning<br>Software design such as architectural design<br>Software development<br>Testing<br>Deployment</p><h1 id="Class-and-object-difference"><a href="#Class-and-object-difference" class="headerlink" title="Class and object difference?"></a>Class and object difference?</h1><p>A class is a group of similar objects. Object is a real-world entity such as book, car, etc. Class is a logical entity. Object is a physical entity</p><h1 id="Final-Keyword-for-variables-classes-and-method"><a href="#Final-Keyword-for-variables-classes-and-method" class="headerlink" title="Final Keyword for variables, classes and method?"></a>Final Keyword for variables, classes and method?</h1><h1 id="What-is-static-variable"><a href="#What-is-static-variable" class="headerlink" title="What is static variable ?"></a>What is static variable ?</h1><p>In Java, static variables are also called class variables. That is, they belong to a class and not a particular instance. As a result, class initialization will initialize static variables. In contrast, a class’s instance will initialize the instance variables (non-static variables).</p><h1 id="What-is-Inheritance-and-what-types-of-inheritance-java-has"><a href="#What-is-Inheritance-and-what-types-of-inheritance-java-has" class="headerlink" title="What is Inheritance and what types of inheritance java has?"></a>What is Inheritance and what types of inheritance java has?</h1><p>Single Inheritance.<br>Multiple Inheritance.<br>Multi-Level Inheritance.<br>Hierarchical Inheritance.<br>Hybrid Inheritance.</p><p>Hybrid inheritance in Java is a combination of two or more types of inheritances. The purpose of using hybrid inheritance in Java is to modularize the codebase into well-defined classes and provide code reusability.<br>subclass (child) - the class that inherits from another class<br>superclass (parent) - the class being inherited from<br>The final Keyword If you don’t want other classes to inherit from a class, use the final keyword:<br>The reason behind this is to prevent ambiguity. Consider a case where class B extends class A and Class C and both class A and C have the same method display(). Now java compiler cannot decide, which display method it should inherit. To prevent such situation, multiple inheritances is not allowed in java</p><h1 id="What-type-of-inheritance-supported-in-java"><a href="#What-type-of-inheritance-supported-in-java" class="headerlink" title="What type of inheritance supported in java?"></a>What type of inheritance supported in java?</h1><h1 id="What-are-the-Entity-Relationships-supported-in-Java-like-one-to-one"><a href="#What-are-the-Entity-Relationships-supported-in-Java-like-one-to-one" class="headerlink" title="What are the Entity Relationships supported in Java-like one-to-one?"></a>What are the Entity Relationships supported in Java-like one-to-one?</h1><p>Java objects in a relational database context are defined as entities. Entities are placed in tables where they occupy columns and rows. Programmers use foreign keys and join tables to define the relationships between entities–namely one-to-one, one-to-many, and many-to-many relationships.</p><h1 id="Does-java-8-support-multiple-interfaces"><a href="#Does-java-8-support-multiple-interfaces" class="headerlink" title="Does java 8 support multiple interfaces?"></a>Does java 8 support multiple interfaces?</h1><p>Java 8 supports default methods where interfaces can provide a default implementation of methods. And a class can implement two or more interfaces.</p><h1 id="Can-you-define-a-method-in-the-interface"><a href="#Can-you-define-a-method-in-the-interface" class="headerlink" title="Can you define a method in the interface?"></a>Can you define a method in the interface?</h1><p>In Java 8 you can implement methods in interface (either static or default methods).</p><h1 id="What-is-OOP-and-what-are-the-advantages"><a href="#What-is-OOP-and-what-are-the-advantages" class="headerlink" title="What is OOP and what are the advantages?"></a>What is OOP and what are the advantages?</h1><p>OOP language allows to break the program into the bit-sized problems that can be solved easily (one object at a time). The new technology promises greater programmer productivity, better quality of software and lesser maintenance cost. OOP systems can be easily upgraded from small to large systems.</p><h1 id="What-is-string-immutable"><a href="#What-is-string-immutable" class="headerlink" title="What is string immutable?"></a>What is string immutable?</h1><p>The String is immutable in Java because of the security, synchronization and concurrency, caching, and class loading. The reason of making string final is to destroy the immutability and to not allow others to extend it. The String objects are cached in the String pool, and it makes the String immutable.</p><h1 id="What-is-a-class-that-supports-string-mutable"><a href="#What-is-a-class-that-supports-string-mutable" class="headerlink" title="What is a class that supports string mutable?"></a>What is a class that supports string mutable?</h1><p>For mutable strings, you can use StringBuffer and StringBuilder classes.</p><p>Difference between String and String Buffer?</p><p>String is an immutable class and its object can’t be modified after it is created but definitely reference other objects. String buffer is mutable classes which can be used to do operation on string object such as reverse of string, concating string and etc</p><h1 id="Difference-Between-Array-and-List"><a href="#Difference-Between-Array-and-List" class="headerlink" title="Difference Between Array and List?"></a>Difference Between Array and List?</h1><p>The main difference between these two data types is the operation you can perform on them. Arrays are specially optimised for arithmetic computations so if you’re going to perform similar operations you should consider using an array instead of a list.<br>Also lists are containers for elements having differing data types but arrays are used as containers for elements of the same data type.</p><h1 id="What-are-the-classes-implemented-using-Array-and-Lists"><a href="#What-are-the-classes-implemented-using-Array-and-Lists" class="headerlink" title="What are the classes implemented using Array and Lists?"></a>What are the classes implemented using Array and Lists?</h1><h1 id="Difference-Between-List-Set-and-Map"><a href="#Difference-Between-List-Set-and-Map" class="headerlink" title="Difference Between List, Set, and Map?"></a>Difference Between List, Set, and Map?</h1><ol><li><p>Duplicity: List allows duplicate elements. Any number of duplicate elements can be inserted into the list without affecting the same existing values and their indexes.<br>Set doesn’t allow duplicates. Set and all of the classes which implements Set interface should have unique elements.<br>Map stored the elements as key &amp; value pair. Map doesn’t allow duplicate keys while it allows duplicate values.</p></li><li><p>Null values: List allows any number of null values.<br>Set allows single null value at most.<br>Map can have single null key at most and any number of null values.</p></li><li><p>Order: List and all of its implementation classes maintains the insertion order.<br>Set doesn’t maintain any order; still few of its classes sort the elements in an order such as LinkedHashSet maintains the elements in insertion order.<br>Similar to Set Map also doesn’t stores the elements in an order, however few of its classes does the same.</p></li></ol><h1 id="What-is-Static-Overloading-and-Dynamic-Overloading"><a href="#What-is-Static-Overloading-and-Dynamic-Overloading" class="headerlink" title="What is Static Overloading and Dynamic Overloading?"></a>What is Static Overloading and Dynamic Overloading?</h1><ol><li><p>Static binding/Compile-Time binding/Early binding/Method overloading.(in same class)</p></li><li><p>Dynamic binding/Run-Time binding/Late binding/Method overriding.(in different classes</p></li></ol><h1 id="What-is-the-use-of-‘public’-in-‘main’-method"><a href="#What-is-the-use-of-‘public’-in-‘main’-method" class="headerlink" title="What is the use of ‘public’ in ‘main’ method?"></a>What is the use of ‘public’ in ‘main’ method?</h1><p>Java main() method. public: It is an access specifier. We should use a public keyword before the main() method so that JVM can identify the execution point of the program. If we use private, protected, and default before the main() method, it will not be visible to JVM.</p><h1 id="What-is-the-importance-of-‘static’-in-‘main’-method"><a href="#What-is-the-importance-of-‘static’-in-‘main’-method" class="headerlink" title="What is the importance of ‘static’ in ‘main’ method?"></a>What is the importance of ‘static’ in ‘main’ method?</h1><h1 id="Which-type-of-error-Runtime-or-Compile-time-occurs-when-we-do-not-use-‘public’-in-‘main’-method"><a href="#Which-type-of-error-Runtime-or-Compile-time-occurs-when-we-do-not-use-‘public’-in-‘main’-method" class="headerlink" title="Which type of error (Runtime or Compile time) occurs, when we do not use ‘public’ in ‘main’ method?"></a>Which type of error (Runtime or Compile time) occurs, when we do not use ‘public’ in ‘main’ method?</h1><h1 id="What-is-‘System’-in-‘System-out-println-’"><a href="#What-is-‘System’-in-‘System-out-println-’" class="headerlink" title="What is ‘System’ in ‘System.out.println()’?"></a>What is ‘System’ in ‘System.out.println()’?</h1><p>System. out. println is a Java statement that prints the argument passed, into the System. out which is generally stdout. System is a Class.</p><h1 id="List-out-the-method-in-‘System-out-println-’"><a href="#List-out-the-method-in-‘System-out-println-’" class="headerlink" title="List out the method in ‘System.out.println()’."></a>List out the method in ‘System.out.println()’.</h1><h1 id="What-is-Class-Object-and-Package"><a href="#What-is-Class-Object-and-Package" class="headerlink" title="What is Class, Object and Package?"></a>What is Class, Object and Package?</h1><p>Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake</p><h1 id="What-are-the-features-of-OOP"><a href="#What-are-the-features-of-OOP" class="headerlink" title="What are the features of OOP?"></a>What are the features of OOP?</h1><pre><code>Inheritance.Polymorphism.Encapsulation.Abstraction</code></pre><h1 id="What-is-polymorphism-1"><a href="#What-is-polymorphism-1" class="headerlink" title="What is polymorphism?"></a>What is polymorphism?</h1><h1 id="What-is-the-difference-between-the-Exception-with-capital-E-and-exception-with-small-e"><a href="#What-is-the-difference-between-the-Exception-with-capital-E-and-exception-with-small-e" class="headerlink" title="What is the difference between the Exception with capital E and exception with small e?"></a>What is the difference between the Exception with capital E and exception with small e?</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm Questions</title>
    <link href="/2022/03/06/Algorithm%20Questions/"/>
    <url>/2022/03/06/Algorithm%20Questions/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-Bubble-sort"><a href="#What-is-Bubble-sort" class="headerlink" title="What is Bubble sort"></a>What is Bubble sort</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> n = arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++)<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// swap arr[j+1] and arr[j]</span><br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="What-is-binary-search"><a href="#What-is-binary-search" class="headerlink" title="What is binary search"></a>What is binary search</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarysearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] test, <span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(start&lt;=end)&#123;<br>            <span class="hljs-keyword">int</span> mid = (start + end) /<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(test[mid]&lt;target)&#123;<br>                end = mid-<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(test[mid]&gt;target)&#123;<br>                start = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h1 id="What’s-quick-sort"><a href="#What’s-quick-sort" class="headerlink" title="What’s quick sort"></a>What’s quick sort</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">int</span> i, j, index;<br>    <span class="hljs-keyword">if</span> (low &gt; hight) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    i = low;<br>    j = hight;<br>    index = a[i];<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= index)<br>            j--;<br>        <span class="hljs-keyword">if</span> (i &lt; j)<br>            a[i++] = a[j];<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt; index)<br>            i++;<br>        <span class="hljs-keyword">if</span> (i &lt; j)<br>            a[j--] = a[i];<br>    &#125;<br>    a[i] = index;<br>    sort(a, low, i - <span class="hljs-number">1</span>);<br>    sort(a, i + <span class="hljs-number">1</span>, hight);<br>    String str = <span class="hljs-string">&quot;ABC&quot;</span>;<br>    permutations(<span class="hljs-string">&quot;&quot;</span>, str);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">permutations</span><span class="hljs-params">(String candidate, String remaining)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (remaining == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (remaining.length() == <span class="hljs-number">0</span>) &#123;<br>        System.out.println(candidate);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; remaining.length(); i++) &#123;<br>        String newCandidate = candidate + remaining.charAt(i);<br>        String newRemaining = remaining.substring(<span class="hljs-number">0</span>, i) + remaining.substring(i + <span class="hljs-number">1</span>);<br>        permutations(newCandidate, newRemaining);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="Big-O-complexity-for-a-recursive-Fibonacci"><a href="#Big-O-complexity-for-a-recursive-Fibonacci" class="headerlink" title="Big O complexity for a recursive Fibonacci"></a>Big O complexity for a recursive Fibonacci</h1><p>Recursive-Fibonacci’s complexity is O(2^n).</p><h1 id="How-do-you-reverse-a-string"><a href="#How-do-you-reverse-a-string" class="headerlink" title="How do you reverse a string?"></a>How do you reverse a string?</h1><p>Stringbuilder()<br>For loop</p><h1 id="Create-a-tree-to-check-whether-the-tree-is-binary-or-not"><a href="#Create-a-tree-to-check-whether-the-tree-is-binary-or-not" class="headerlink" title="Create a tree to check whether the tree is binary or not"></a>Create a tree to check whether the tree is binary or not</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> value;<br>        TreeNode leftNode;<br>        TreeNode rightNode;<br> <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = value;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setlNode</span><span class="hljs-params">(TreeNode lNode)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.leftNode = lNode;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setrNode</span><span class="hljs-params">(TreeNode rNode)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.rightNode = rNode;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> getDepth(root) == -<span class="hljs-number">1</span>? <span class="hljs-keyword">false</span>:<span class="hljs-keyword">true</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> leftD = getDepth(root.leftNode);<br>    <span class="hljs-keyword">if</span>(leftD == -<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> rightD = getDepth(root.rightNode);<br>    <span class="hljs-keyword">if</span>(rightD == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(Math.abs(leftD-rightD)&gt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+Math.max(leftD,rightD);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeNode test = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        test.setlNode(test);<br>        test.leftNode = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">2</span>);<br>        test.setrNode(test);<br>        test.rightNode = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">3</span>);<br>        System.out.println(isBalanced(test));<br>    &#125;<br><br># Which search method you use <span class="hljs-keyword">for</span> a dataset<br> ```<span class="hljs-function">java</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] ss = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">23</span>, <span class="hljs-number">44</span>, <span class="hljs-number">56</span>, <span class="hljs-number">22</span>, <span class="hljs-number">38</span>, <span class="hljs-number">50</span>&#125;;<br>        <span class="hljs-keyword">int</span> target = <span class="hljs-number">38</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = ss.length - <span class="hljs-number">1</span>;<br>        System.out.println(method(ss,target,left,right));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">method</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] ss, <span class="hljs-keyword">int</span> target,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) /<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (ss[mid]&lt;target)&#123;<br>                right = mid -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ss[mid]&gt;target)&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="Write-a-program-to-print-calendar-of-current-year"><a href="#Write-a-program-to-print-calendar-of-current-year" class="headerlink" title="Write a program to print calendar of current year"></a>Write a program to print calendar of current year</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> year = Calendar.getInstance().get(Calendar.YEAR);<br> <br></code></pre></td></tr></table></figure><h1 id="Find-smallest-and-second-smallest-number-from-list"><a href="#Find-smallest-and-second-smallest-number-from-list" class="headerlink" title="Find smallest and second smallest number from list"></a>Find smallest and second smallest number from list</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>&#125;;<br>Arrays.sort(arr);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length-<span class="hljs-number">1</span>; i &gt; arr.length-<span class="hljs-number">3</span>; i--) &#123;<br>    System.out.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Find-twin-prime-from-0-100"><a href="#Find-twin-prime-from-0-100" class="headerlink" title="Find twin prime from 0, 100"></a>Find twin prime from 0, 100</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(findPrime(i))&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= Math.sqrt(n); i++) &#123;<br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Write-a-program-for-reversing-the-Single-Linked-List"><a href="#Write-a-program-for-reversing-the-Single-Linked-List" class="headerlink" title="Write a program for reversing the Single Linked List?"></a>Write a program for reversing the Single Linked List?</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] sortedArray, <span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high) &#123;<br>   <span class="hljs-keyword">int</span> index = Integer.MAX_VALUE;<br>   <br>   <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>       <span class="hljs-keyword">int</span> mid = low  + ((high - low) / <span class="hljs-number">2</span>);<br>       <span class="hljs-keyword">if</span> (sortedArray[mid] &lt; key) &#123;<br>           low = mid + <span class="hljs-number">1</span>;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sortedArray[mid] &gt; key) &#123;<br>           high = mid - <span class="hljs-number">1</span>;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sortedArray[mid] == key) &#123;<br>           index = mid;<br>           <span class="hljs-keyword">break</span>;<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> index;<br></code></pre></td></tr></table></figure><h1 id="Write-a-program-to-search-a-number-in-the-given-list-of-numbers"><a href="#Write-a-program-to-search-a-number-in-the-given-list-of-numbers" class="headerlink" title="Write a program to search a number in the given list of numbers."></a>Write a program to search a number in the given list of numbers.</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Node <span class="hljs-title">reverse</span><span class="hljs-params">(Node node)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node prev = <span class="hljs-keyword">null</span>;<br>    Node current = node;<br>    Node next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-keyword">null</span>) &#123;<br>        next = current.next;<br>        current.next = prev;<br>        prev = current;<br>        current = next;<br>    &#125;<br>    node = prev;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Write-a-stack"><a href="#Write-a-stack" class="headerlink" title="Write a stack"></a>Write a stack</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> arr[];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> capacity;<br> <br>    <span class="hljs-comment">// Constructor to initialize the stack</span><br>    Stack(<span class="hljs-keyword">int</span> size)<br>    &#123;<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>        capacity = size;<br>        top = -<span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// Utility function to add an element `x` to the stack</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull())<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;Overflow\nProgram Terminated\n&quot;</span>);<br>            System.exit(-<span class="hljs-number">1</span>);<br>        &#125;<br> <br>        System.out.println(<span class="hljs-string">&quot;Inserting &quot;</span> + x);<br>        arr[++top] = x;<br>    &#125;<br> <br>    <span class="hljs-comment">// Utility function to pop a top element from the stack</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// check for stack underflow</span><br>        <span class="hljs-keyword">if</span> (isEmpty())<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;Underflow\nProgram Terminated&quot;</span>);<br>            System.exit(-<span class="hljs-number">1</span>);<br>        &#125;<br> <br>        System.out.println(<span class="hljs-string">&quot;Removing &quot;</span> + peek());<br> <br>        <span class="hljs-comment">// decrease stack size by 1 and (optionally) return the popped element</span><br>        <span class="hljs-keyword">return</span> arr[top--];<br>    &#125;<br> <br>    <span class="hljs-comment">// Utility function to return the top element of the stack</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> arr[top];<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.exit(-<span class="hljs-number">1</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// Utility function to return the size of the stack</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> top + <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// Utility function to check if the stack is empty or not</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;               <span class="hljs-comment">// or return size() == 0;</span><br>    &#125;<br> <br>    <span class="hljs-comment">// Utility function to check if the stack is full or not</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> top == capacity - <span class="hljs-number">1</span>;     <span class="hljs-comment">// or return size() == capacity;</span><br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Stack stack = <span class="hljs-keyword">new</span> Stack(<span class="hljs-number">3</span>);<br> <br>        stack.push(<span class="hljs-number">1</span>);      <span class="hljs-comment">// inserting 1 in the stack</span><br>        stack.push(<span class="hljs-number">2</span>);      <span class="hljs-comment">// inserting 2 in the stack</span><br> <br>        stack.pop();        <span class="hljs-comment">// removing the top element (2)</span><br>        stack.pop();        <span class="hljs-comment">// removing the top element (1)</span><br> <br>        stack.push(<span class="hljs-number">3</span>);      <span class="hljs-comment">// inserting 3 in the stack</span><br> <br>        System.out.println(<span class="hljs-string">&quot;The top element is &quot;</span> + stack.peek());<br>        System.out.println(<span class="hljs-string">&quot;The stack size is &quot;</span> + stack.size());<br> <br>        stack.pop();        <span class="hljs-comment">// removing the top element (3)</span><br> <br>        <span class="hljs-comment">// check if the stack is empty</span><br>        <span class="hljs-keyword">if</span> (stack.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is empty&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is not empty&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Which-are-the-two-sorts-have-same-avg-time-complexity"><a href="#Which-are-the-two-sorts-have-same-avg-time-complexity" class="headerlink" title="Which are the two sorts have same avg time complexity"></a>Which are the two sorts have same avg time complexity</h1><h1 id="Removes-0s-from-a-data-set-and-store-the-nonzero-values-in-the-same-order"><a href="#Removes-0s-from-a-data-set-and-store-the-nonzero-values-in-the-same-order" class="headerlink" title="Removes 0s from a data set and store the nonzero values in the same order"></a>Removes 0s from a data set and store the nonzero values in the same order</h1><h1 id="Write-a-program-to-find-the-second-highest-value-from-the-array"><a href="#Write-a-program-to-find-the-second-highest-value-from-the-array" class="headerlink" title="Write a program to find the second highest value from the array?"></a>Write a program to find the second highest value from the array?</h1><h1 id="Sorting-elements-of-an-array"><a href="#Sorting-elements-of-an-array" class="headerlink" title="Sorting elements of an array"></a>Sorting elements of an array</h1><h1 id="In-an-array-with-elements-of-several-frequency-how-to-get-the-unique-elements"><a href="#In-an-array-with-elements-of-several-frequency-how-to-get-the-unique-elements" class="headerlink" title="In an array with elements of several frequency, how to get the unique elements?"></a>In an array with elements of several frequency, how to get the unique elements?</h1><h1 id="Walk-me-through-creating-a-code-for-storing-a-list-of-items"><a href="#Walk-me-through-creating-a-code-for-storing-a-list-of-items" class="headerlink" title="Walk me through creating a code for storing a list of items"></a>Walk me through creating a code for storing a list of items</h1><h1 id="array-manipulation-without-using-default-function-provided"><a href="#array-manipulation-without-using-default-function-provided" class="headerlink" title="array manipulation without using default function provided"></a>array manipulation without using default function provided</h1><h1 id="Algorithms-and-Time-Complexity"><a href="#Algorithms-and-Time-Complexity" class="headerlink" title="Algorithms and Time Complexity"></a>Algorithms and Time Complexity</h1><h1 id="How-to-find-the-missing-value-of-a-list-of-consecutive-numbers-without-sorting"><a href="#How-to-find-the-missing-value-of-a-list-of-consecutive-numbers-without-sorting" class="headerlink" title="How to find the missing value of a list of consecutive numbers without sorting?"></a>How to find the missing value of a list of consecutive numbers without sorting?</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm Theoretical Questions</title>
    <link href="/2022/02/06/Algorithm%20Theoretical%20Questions/"/>
    <url>/2022/02/06/Algorithm%20Theoretical%20Questions/</url>
    
    <content type="html"><![CDATA[<h1 id="Difference-between-String-Buffer-and-String-Builder"><a href="#Difference-between-String-Buffer-and-String-Builder" class="headerlink" title="Difference between String Buffer and String Builder?"></a>Difference between String Buffer and String Builder?</h1><p>StringBuffer and StringBuilder are similar, but StringBuilder is faster and preferred over StringBuffer for the single-threaded program. If thread safety is needed, then StringBuffer is used.</p><h1 id="What-is-HashMap"><a href="#What-is-HashMap" class="headerlink" title="What is HashMap"></a>What is HashMap</h1><p>HashMap is a data structure that uses a hash function to map identifying values, known as keys, to their associated values. It contains “key-value” pairs and allows retrieving value by key.</p><h1 id="Advantages-of-double-linked-list-over-single"><a href="#Advantages-of-double-linked-list-over-single" class="headerlink" title="Advantages of double linked list over single"></a>Advantages of double linked list over single</h1><p>the doubly linked list can be traversed in forward as well as backward directions, unlike singly linked list which can be traversed in the forward direction only. Delete operation in a doubly-linked list is more efficient when compared to singly list when a given node is given.</p><h1 id="What’s-directed-graph"><a href="#What’s-directed-graph" class="headerlink" title="What’s directed graph"></a>What’s directed graph</h1><p>In mathematics, and more specifically in graph theory, a directed graph is a graph that is made up of a set of vertices connected by directed edges often called arcs.</p><h1 id="What-is-Array-List"><a href="#What-is-Array-List" class="headerlink" title="What is Array List"></a>What is Array List</h1><p>The Array List class has a regular array inside it. When an element is added, it is placed into the array. If the array is not big enough, a new, larger array is created to replace the old one and the old one is removed.</p><h1 id="What-is-LinkedList"><a href="#What-is-LinkedList" class="headerlink" title="What is LinkedList"></a>What is LinkedList</h1><p>The LinkedList stores its items in “containers.” The list has a link to the first container and each container has a link to the next container in the list. To add an element to the list, the element is placed into a new container and that container is linked to one of the other containers in the list.</p><h1 id="What-is-Collection-in-java"><a href="#What-is-Collection-in-java" class="headerlink" title="What is Collection in java?"></a>What is Collection in java?</h1><p>The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.</p><h1 id="Difference-between-String-Buffer-and-String-Builder-1"><a href="#Difference-between-String-Buffer-and-String-Builder-1" class="headerlink" title="Difference between String Buffer and String Builder?"></a>Difference between String Buffer and String Builder?</h1><p>StringBuffer and StringBuilder are similar, but StringBuilder is faster and preferred over StringBuffer for the single-threaded program. If thread safety is needed, then StringBuffer is used.</p><h1 id="Queue-stack-difference"><a href="#Queue-stack-difference" class="headerlink" title="Queue stack difference"></a>Queue stack difference</h1><p>Queue (first in first out )vs Stack (first in last out)<br>List and array difference</p><h1 id="Array-list-difference"><a href="#Array-list-difference" class="headerlink" title="Array list difference"></a>Array list difference</h1><p>List is an interface, List interface extends the Collection framework, List cannot be instantiated. List interface creates a collection of elements that are stored in a sequence and they are identified and accessed using the index.<br>ArrayList is a class ArrayList extends AbstractList class and implements List interface ArrayList can be instantiated. ArrayList creates an array of objects where the array can grow dynamically.</p><h1 id="String-vs-array"><a href="#String-vs-array" class="headerlink" title="String vs array"></a>String vs array</h1><p>Strings are similar to arrays with just a few differences. Usually, the array size is fixed, while strings can have a variable number of elements. Arrays can contain any data type (char short int even other arrays) while strings are usually ASCII characters terminated with a NULL (0) character.</p><h1 id="Write-down-a-code-to-implement-the-hash-map"><a href="#Write-down-a-code-to-implement-the-hash-map" class="headerlink" title="Write down a code to implement the hash map."></a>Write down a code to implement the hash map.</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Springboot</title>
    <link href="/2021/11/30/Springboot/"/>
    <url>/2021/11/30/Springboot/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Overview-of-Spring-Boot"><a href="#1-Overview-of-Spring-Boot" class="headerlink" title="1. Overview of Spring Boot"></a>1. Overview of Spring Boot</h2><p><strong>Goal</strong>: Understand what Spring Boot is and what it does</p><p><strong>summary</strong>:</p><p>Spring Boot is a convenient to build scaffolding based on spring engineering; its role is to help developers quickly build large spring projects. Simplify the configuration of the project and rely on management; realize that developers concentrate their time on business development.</p><h2 id="2-Getting-Started-with-Spring-Boot"><a href="#2-Getting-Started-with-Spring-Boot" class="headerlink" title="2. Getting Started with Spring Boot"></a>2. Getting Started with Spring Boot</h2><p><strong>Goal</strong>: Be able to build a project using Spring Boot</p><p><strong>analyze</strong>:</p><p>Requirements: You can visit <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> in the browser to output a string of characters</p><p>Implementation steps:</p><ol><li>Create a project;</li><li>Add dependency (starter dependency, spring-boot-starter-web);</li><li>Create a startup class;</li><li>Create the processor Controller;</li><li>Testing</li></ol><p><strong>summary</strong>:</p><p>Spring Boot projects can quickly create web projects by adding starter dependencies and creating startup boot classes.</p><blockquote><p>spring-boot-starter-web default application server port is 8080</p></blockquote><h2 id="3-Java-code-configuration"><a href="#3-Java-code-configuration" class="headerlink" title="3. Java code configuration"></a>3. Java code configuration</h2><p><strong>Target</strong>: You can use @Value to obtain configuration file configuration items and combine @Bean to register components to Spring</p><p><strong>analyze</strong>:</p><p>Requirements: Use Java code to configure the database connection pool, and can be injected and used in the processor</p><p>step:</p><ol><li>Add dependencies;</li><li>Create a database;</li><li>Create a configuration file jdbc.properties for database connection parameters;</li><li>Create a configuration class;</li><li>Transform the processor class to inject the data source and use it</li></ol><p><strong>summary</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sprigboot.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span><br>    String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    String password;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">()</span></span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driverClassName);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-Spring-Boot-attribute-injection-method"><a href="#4-Spring-Boot-attribute-injection-method" class="headerlink" title="4. Spring Boot attribute injection method"></a>4. Spring Boot attribute injection method</h2><p><strong>Goal</strong>: Able to use @ConfigurationProperties to read and apply Spring Boot configuration file configuration items</p><p><strong>analyze</strong>:</p><p>Requirements: Read the configuration items in the configuration file into an object;</p><p>Implementation: You can use the annotation @ConfigurationProperties provided by Spring Boot, which can read the configuration items in the Spring Boot configuration file (must be application.properties or application.yml by default) into an object.</p><p>Implementation steps:</p><ol><li>Create a configuration item class JdbcProperties class, add @ConfigurationProperties above the class name;</li><li>Modify the name of jdbc.properties to application.properties;</li><li>Inject the JdbcProperties object into JdbcConfig;</li><li>Testing</li></ol><p><strong>summary</strong>:</p><p>-Use @ConfigurationProperties to write configuration item classes to set the configuration items in the configuration file to the object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jdbc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcProperties</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUrl</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUrl</span><span class="hljs-params">(String url)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDriverClassName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> driverClassName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDriverClassName</span><span class="hljs-params">(String driverClassName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.driverClassName = driverClassName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>-Use @ConfigurationProperties on the method</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jdbc&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Multiple-yml-file-configuration"><a href="#5-Multiple-yml-file-configuration" class="headerlink" title="5. Multiple yml file configuration"></a>5. Multiple yml file configuration</h2><p><strong>Target</strong>: Multiple yml files can be configured and activated in the application.yml file</p><p><strong>analyze</strong>:</p><p>The yaml and properties configuration files have the same functions and functions except for the different presentation forms; the original way of reading in the project does not need to be changed.</p><ol><li>Features of yml configuration file:</li></ol><ol><li>Display configuration items in a tree-like hierarchical structure;</li><li>If there is a relationship between the configuration items, you need to branch and leave two blanks;</li><li>If the configuration item has a value, you need to write the value of the configuration item after a blank space after <code>:</code>;</li></ol><p>Modify the application.properties configuration file to application.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">jdbc:</span><br>  <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/sprigboot</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">key:</span><br>  <span class="hljs-attr">abc:</span> <span class="hljs-string">cba</span><br>  <span class="hljs-attr">def:</span><br>    <span class="hljs-string">-g</span><br>    <span class="hljs-string">-h</span><br>    <span class="hljs-string">-j</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Multiple yml configuration files; they are allowed in spring boot. The name of these configuration files must be application-***.yml, and these configuration files must be activated in the application.yml configuration file before they can be used.</li></ol><ol start="3"><li>If the properties and yml configuration files exist in the spring boot project at the same time; then both types of configuration files are valid. If there are configuration items with the same name in the two configuration files, the properties file will be the main one.</li></ol><p><strong>summary</strong>:</p><p>In the case of multiple configuration files, these files need to be activated in the application.yml file:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#Activate configuration file; need to specify other configuration file name</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">abc,def</span><br></code></pre></td></tr></table></figure><h2 id="6-Principles-of-Automatic-Configuration"><a href="#6-Principles-of-Automatic-Configuration" class="headerlink" title="6. Principles of Automatic Configuration"></a>6. Principles of Automatic Configuration</h2><p><strong>Goal</strong>: Understand the configuration loading process of the Spring Boot project</p><p><strong>summary</strong>:</p><p>-Many auto-configuration classes are defined in the <code>META-INF\spring.fatories</code> file; you can rely on auto-configuration components based on the starter added in the pom.xml file<br>-Through the following process, you can modify the application configuration file and change the default parameters of the automatically configured components</p><h2 id="7-lombok-application"><a href="#7-lombok-application" class="headerlink" title="7. lombok application"></a>7. lombok application</h2><p><strong>Goal</strong>: Use lombok’s annotations to simplify the pojo class</p><p><strong>analyze</strong>:</p><p>Use Spring Boot to integrate SSM project; need to use database data.</p><p>-Import database table data into the database (springboot_test);</p><p>-Write the entity class corresponding to the database table; in general, you need to write methods such as get/set/toString, which will take time and make the entity class look bloated. You can use the lombok plugin to simplify the entity class.</p><p>  lombok is a plug-in tool package; some annotations such as @Data, @Getter are provided to simplify the writing of the construction method, get/set and other methods in the entity class.</p><ol><li>Install the lombok plugin in IDEA;</li><li>Add the dependency corresponding to lombok to the project pom.xml file;</li><li>Modify entity classes to use lombok annotations</li></ol><p><strong>summary</strong>:</p><p>Use on Bean:<br>@Data: automatically provide getter and setter, hashCode, equals, toString and other methods<br>@Getter: automatically provide a getter method<br>@Setter: automatically provide setter methods<br>@Slf4j: Log variables are automatically provided in the bean, and the useful thing is the log function of slf4j.</p><h2 id="8-Spring-Boot-integration-SpringMVC-port-and-static-resources"><a href="#8-Spring-Boot-integration-SpringMVC-port-and-static-resources" class="headerlink" title="8. Spring Boot integration-SpringMVC port and static resources"></a>8. Spring Boot integration-SpringMVC port and static resources</h2><p><strong>Target</strong>: You can modify the port of tomcat and access the static resources in the project</p><p><strong>analyze</strong>:</p><p>-Modify tomcat port</p><p>  Query **Properties, set the configuration item (prefix + class variable name) to the application configuration file</p><p>-Access static resources in the project</p><p>  Where to place static resources; place static resources and access them</p><p><strong>summary</strong>:</p><p>-Modify the project tomcat port:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#tomcat port</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>-In the spring boot project, static resources can be placed in the following directories:</p><h2 id="9-Spring-Boot-Integration-SpringMVC-Interceptor"><a href="#9-Spring-Boot-Integration-SpringMVC-Interceptor" class="headerlink" title="9. Spring Boot Integration-SpringMVC Interceptor"></a>9. Spring Boot Integration-SpringMVC Interceptor</h2><p><strong>Target</strong>: You can configure a custom SpringMVC interceptor in the Spring Boot project</p><p><strong>analyze</strong>:</p><ol><li>Write the interceptor (implement HandlerInterceptor);</li><li>Write a configuration class to implement WebMvcConfigurer, and add various components to this class;</li><li>Testing</li></ol><p><strong>summary</strong>:</p><p>You can add various components through the configuration class in the spring boot project; if you want to add an interceptor:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sprigboot.config;<br><br><span class="hljs-keyword">import</span> com.sprigboot.interceptor.MyInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-comment">//Register the interceptor</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MyInterceptor <span class="hljs-title">myInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyInterceptor();<br>    &#125;<br><br>    <span class="hljs-comment">//Add interceptor to spring mvc interceptor chain</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(myInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="10-Spring-Boot-Integration-Transaction-and-Connection-Pool"><a href="#10-Spring-Boot-Integration-Transaction-and-Connection-Pool" class="headerlink" title="10. Spring Boot Integration-Transaction and Connection Pool"></a>10. Spring Boot Integration-Transaction and Connection Pool</h2><p><strong>Goal</strong>: Configure Spring Boot’s own default hikari database connection pool and use @Transactional annotations for transaction configuration</p><p><strong>analyze</strong>:</p><p>-Transaction configuration</p><ol><li>Add transaction-related starter dependencies and mysql-related dependencies;</li><li>Write business class UserService using transaction annotation @Transactional</li></ol><p>-Database connection pool hikari configuration</p><p>  Only need to specify database related parameters in the application configuration file</p><p><strong>summary</strong>:</p><p>-Transaction configuration; only need to add jdbc starter dependency<br>-The database connection pool uses the default hikari, which is configured in the configuration file as follows:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/springboot_test</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br></code></pre></td></tr></table></figure><h2 id="11-Spring-Boot-Integration-Mybatis"><a href="#11-Spring-Boot-Integration-Mybatis" class="headerlink" title="11. Spring Boot Integration-Mybatis"></a>11. Spring Boot Integration-Mybatis</h2><p><strong>Objective</strong>: Configure the integration package of Mybatis in the Spring Boot project, set the entity category name of Mybatis, and output the configuration items for executing sql statements</p><p><strong>analyze</strong>:</p><ol><li>Add starter dependency;</li><li>Configure Mybatis: entity category name package, log, mapping file, etc.;</li><li>Configure MapperScan</li></ol><p><strong>summary</strong>:</p><p>-Add mybatis official launcher for spring boot</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br></code></pre></td></tr></table></figure><p>-Configure mybatis</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># Entity category name package path</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.sprigboot.pojo</span><br>  <span class="hljs-comment"># Map file path</span><br>  <span class="hljs-comment"># mapper-locations: classpath:mappers/*.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><p>-Set the mapper scan in the launcher class</p><h2 id="12-Spring-Boot-Integration-Universal-Mapper"><a href="#12-Spring-Boot-Integration-Universal-Mapper" class="headerlink" title="12. Spring Boot Integration-Universal Mapper"></a>12. Spring Boot Integration-Universal Mapper</h2><p><strong>Goal</strong>: Configure the general Mapper component to the Spring Boot project and use the Mapper<T> interface</T></p><p><strong>analyze</strong>:</p><p>General Mapper: It can realize automatic splicing of sql statements; all mappers do not need to write any method, that is, no sql statement is written. Can improve development efficiency.</p><ol><li>Add starter dependency;</li><li>Transform UserMapper to inherit Mapper<User>;</User></li><li>Modify the Mapper scan annotation in the startup boot class Application;</li><li>Modify the User entity class to add jpa annotations;</li><li>Transform UserService to realize business functions;</li></ol><p><strong>summary</strong>:</p><blockquote><p>The mapper scan annotation on the startup boot class must be modified to the scan annotation of the general mapper</p></blockquote><h2 id="13-Spring-Boot-Integration-Test"><a href="#13-Spring-Boot-Integration-Test" class="headerlink" title="13. Spring Boot Integration Test"></a>13. Spring Boot Integration Test</h2><p><strong>Target</strong>: Can access the corresponding path of the processor to query the data in the database according to id</p><p><strong>analyze</strong>:</p><ol><li>Transform HelloController, inject UserService and use its methods to implement queries;</li><li>Start the project for testing <a href="http://localhost/user/user">http://localhost/user/user</a> id –&gt; <a href="http://localhost/user/8">http://localhost/user/8</a></li></ol><p><strong>summary</strong>:</p><p>Modified HelloController:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserService userService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Query users based on user id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id user id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> user</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> userService.queryById(id);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="14-Spring-Boot-Integration-Junit"><a href="#14-Spring-Boot-Integration-Junit" class="headerlink" title="14. Spring Boot Integration-Junit"></a>14. Spring Boot Integration-Junit</h2><p><strong>Objective</strong>: Use Junit to unit test the UserService method in the Spring Boot project</p><p><strong>analyze</strong>:</p><ol><li>Add the starter dependency spring-boot-starter-test;</li><li>Writing test classes</li></ol><p><strong>summary</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryById</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = userService.queryById(<span class="hljs-number">8L</span>);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span>+ user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveUser</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setUserName(<span class="hljs-string">&quot;test2&quot;</span>);<br>        user.setName(<span class="hljs-string">&quot;test2&quot;</span>);<br>        user.setAge(<span class="hljs-number">13</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        user.setSex(<span class="hljs-number">1</span>);<br>        user.setCreated(<span class="hljs-keyword">new</span> Date());<br>        userService.saveUser(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>If you write a test class in a Spring Boot project, you must add @SpringBootTest to the class</p></blockquote><h2 id="15-Spring-Boot-integration-redis"><a href="#15-Spring-Boot-integration-redis" class="headerlink" title="15. Spring Boot integration-redis"></a>15. Spring Boot integration-redis</h2><p><strong>Goal</strong>: Use Junit to test the use of RedisTemplate in the Spring Boot project</p><p><strong>analyze</strong>:</p><ol><li>Add starter dependency; spring-boot-starter-data-redis</li><li>Configure and modify the connection parameters of redis in application.yml; (redis needs to be started)</li><li>Write test classes and apply RedisTemplate to operate 5 data types in redis (string/hash/list/set/sorted set)</li></ol><p><strong>summary</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//string string</span><br>        <span class="hljs-comment">//redisTemplate.opsForValue().set(&quot;str&quot;, &quot;sprigboot&quot;);</span><br>        redisTemplate.boundValueOps(<span class="hljs-string">&quot;str&quot;</span>).set(<span class="hljs-string">&quot;sprigboot&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;str = &quot;</span>+ redisTemplate.opsForValue().get(<span class="hljs-string">&quot;str&quot;</span>));<br><br>        <span class="hljs-comment">//hash hash</span><br>        redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;sprigboot&quot;</span>);<br>        redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">13</span>);<br>        <span class="hljs-comment">//Get all domains</span><br>        Set set = redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).keys();<br>        System.out.println(<span class="hljs-string">&quot;Hash all fields:&quot;</span> + set);<br>        <span class="hljs-comment">//Get all values</span><br>        List list = redisTemplate.boundHashOps(<span class="hljs-string">&quot;h_key&quot;</span>).values();<br>        System.out.println(<span class="hljs-string">&quot;Hash the value of all fields:&quot;</span> + list);<br><br>        <span class="hljs-comment">//list list</span><br>        redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).leftPush(<span class="hljs-string">&quot;c&quot;</span>);<br>        redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).leftPush(<span class="hljs-string">&quot;b&quot;</span>);<br>        redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).leftPush(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-comment">//Get all elements</span><br>        list = redisTemplate.boundListOps(<span class="hljs-string">&quot;l_key&quot;</span>).range(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;All elements in list:&quot;</span> + list);<br><br>        <span class="hljs-comment">// set collection</span><br>        redisTemplate.boundSetOps(<span class="hljs-string">&quot;s_key&quot;</span>).add(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>        set = redisTemplate.boundSetOps(<span class="hljs-string">&quot;s_key&quot;</span>).members();<br>        System.out.println(<span class="hljs-string">&quot;All elements in set collection:&quot;</span> + set);<br><br>        <span class="hljs-comment">// sorted set ordered set</span><br>        redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).add(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">30</span>);<br>        redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).add(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">20</span>);<br>        redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).add(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">10</span>);<br>        set = redisTemplate.boundZSetOps(<span class="hljs-string">&quot;z_key&quot;</span>).range(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;All elements in zset ordered set:&quot;</span> + set);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="16-Spring-Boot-project-deployment"><a href="#16-Spring-Boot-project-deployment" class="headerlink" title="16. Spring Boot project deployment"></a>16. Spring Boot project deployment</h2><p><strong>Goal</strong>: Use the maven command to type the Spring Boot project into a jar package and run the test</p><p><strong>analyze</strong>:</p><ol><li>You need to add packaging components to put the resources, configuration, and dependency packages in the project into a jar package; you can use maven’s <code>package</code>;</li><li>Deployment: java -jar package name</li></ol><p><strong>summary</strong>:</p><p>-Add packaging components</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- If the plug-in is not configured when the jar package is typed, the jar package that is typed out has no manifest file --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>-Deployment and operation</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -jar package name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Array_Question</title>
    <link href="/2021/11/15/Array%20Question/"/>
    <url>/2021/11/15/Array%20Question/</url>
    
    <content type="html"><![CDATA[<h1 id="1-close-to-a-given-number"><a href="#1-close-to-a-given-number" class="headerlink" title="1 close to a given number"></a>1 close to a given number</h1><pre><code>public static void main(String[] args) &#123;</code></pre><p>//        close_to_given_num.method1();<br>        close_to_given_num.method2();<br>    }<br>    public static void method1(){<br>        int[] arr = {-40,-5,1,3,6,7,8,20};<br>        int left = 0, right = arr.length -1 , target = 5, min= arr[0] + arr[1] ;<br>        int diff = Math.abs(target - min), position_left =0, position_right = 0;<br>        while(left &lt; right){<br>            int cur = arr[left] + arr[right];<br>            if(diff &gt; Math.abs(target - cur)){<br>                position_left = left;<br>                position_right = right;<br>                diff = Math.abs(target-cur);<br>            }<br>            if (cur&lt;0){<br>                left ++;<br>            }else{<br>                right –;<br>            }<br>        }<br>        System.out.println(“The position of left: “ + arr[position_left] +<br>                “the position of right: “+arr[position_right] + “is close to the “ + target);<br>    }<br>    public static void method2(){<br>        int[] arr = {-40,-5,1,3,6,7,8,20};<br>        int left = 0, right = arr.length -1 , target = 15;<br>        ArrayList&lt;List<Integer>&gt; ls = new ArrayList&lt;&gt;();<br>        ArrayList<Integer> singleList = new ArrayList<Integer>();<br>        while(left &lt; right){<br>            int cur = arr[left] + arr[right];<br>            if(cur == target){<br>                singleList.add(arr[left]);<br>                singleList.add(arr[right]);<br>                ls.add(singleList);<br>                left ++;<br>                right –;<br>            }<br>            else if(cur&lt;target){<br>                left ++;<br>            }else{<br>                right –;<br>            }<br>        }<br>        for(List<Integer> i:ls){<br>        System.out.println(i);<br>    }<br>}</Integer></Integer></Integer></Integer></p><h1 id="2-count-occurance-of-an-array"><a href="#2-count-occurance-of-an-array" class="headerlink" title="2. count occurance of an array"></a>2. count occurance of an array</h1><p>  int[] arr = {1, 1, 1, 3, 3, 4, 5, 5, 6, 6};<br>        HashMap&lt;Integer, Integer&gt; occ = new HashMap&lt;&gt;();<br>        for (int i = 0; i &lt; arr.length; i++) {<br>            if(!occ.containsKey(arr[i])){<br>                occ.put(arr[i],1);<br>            }else{<br>                occ.put(arr[i],occ.getOrDefault(arr[i],0)  + 1);<br>            }<br>        }<br>        for (int j : occ.keySet()) {<br>            System.out.println(“Frequence of “+ j + “ is : “ + occ.get(j));<br>        }<br>    }</p><h1 id="3-find-the-largest-number-in-an-array"><a href="#3-find-the-largest-number-in-an-array" class="headerlink" title="3 find the largest number in an array"></a>3 find the largest number in an array</h1><p>   public static void main(String[] args) {<br>        int arr[] = new int[]{12,56,76,89,100,343,21,234};<br>        int largest = arr[0];<br>        int smallest = arr[0];<br>        for (int i = 0; i &lt; arr.length; i++) {<br>            if(arr[i]&gt;largest){<br>                largest = arr[i];<br>            }<br>        }<br>        System.out.println(largest);<br>    }</p><h1 id="4-Fizz-buzz"><a href="#4-Fizz-buzz" class="headerlink" title="4 Fizz buzz"></a>4 Fizz buzz</h1><p>   public static void main(String[] args) {<br>        ArrayList<Integer> q = new ArrayList&lt;&gt;();<br>        for (int i = 0; i &lt; 16; i++) {<br>            q.add(i);<br>        }<br>        ArrayList<String> result = new ArrayList&lt;&gt;();<br>        for (int i = 0; i &lt; q.size(); i++) {<br>            if(q.get(i) % 3 == 0 &amp;&amp; q.get(i) % 5 == 0){<br>                result.add(“fizz buzz”);<br>            }<br>            else if (q.get(i) % 3 == 0){<br>                result.add(“fizz”);<br>            }<br>            else if (q.get(i) % 5 == 0){<br>                result.add(“buzz”);<br>            }<br>            else {<br>                result.add(q.get(i).toString());<br>            }<br>        }<br>        for (int i = 1; i &lt; result.size(); i++) {<br>            System.out.println(result.get(i));<br>        }<br>    }</String></Integer></p><h1 id="5-missing-number-of-an-array"><a href="#5-missing-number-of-an-array" class="headerlink" title="5 missing number of an array"></a>5 missing number of an array</h1><p>   public static void main(String[] args) {<br>        int[] arr1={7,5,6,1,4,2};<br>        int[] arr2={5,3,1,2};<br>        int num = arr2.length + 1;<br>        int sum = num * ( num + 1 ) / 2;<br>        int result = sum;<br>        for (int i = 0; i &lt; arr2.length; i++) {<br>            result -= arr2[i];<br>            System.out.println(result);<br>        }</p><p>//        System.out.println(result);<br>    }</p><h1 id="6-find-odd-occurance"><a href="#6-find-odd-occurance" class="headerlink" title="6 find odd occurance"></a>6 find odd occurance</h1><p>   public static boolean method1(int num){<br>        if (num % 2 == 0){<br>            return false;<br>        }<br>        return true;<br>    }<br>   public static void main(String[] args) {<br>        int array[] = new int[]{20, 40, 50, 40, 50, 20, 30, 30, 50, 20, 40, 40, 20};<br>        HashMap&lt;Integer,Integer&gt; hs = new HashMap&lt;Integer,Integer&gt;();<br>        for (int i = 0; i &lt; array.length; i++) {<br>            if(!hs.containsKey(array[i]))<br>            {<br>                hs.put(array[i],1);<br>            }<br>            else{<br>                hs.put(array[i],hs.getOrDefault(array[i],0) + 1 );<br>            }<br>        }<br>        for(int j:hs.keySet()){<br>            if(method1(hs.get(j))) {<br>                System.out.println(j + “the frequence of it “ + hs.get(j));<br>            }<br>        }<br>       }<br>   }</p><h1 id="7-Rail-station-problems"><a href="#7-Rail-station-problems" class="headerlink" title="7 Rail station problems"></a>7 Rail station problems</h1><p>   public static void main(String[] args) {<br>        int platform_needed = 0,max_platform =0;<br>        int arr[] = {100, 140, 150, 200, 215, 400};<br>        int dep[] = {110, 300, 210, 230,315, 600};<br>        int i=0,j=0,n=6;<br>        Arrays.sort(arr);<br>        Arrays.sort(dep);<br>        while(i &lt; n &amp;&amp; j &lt; n){<br>            if(arr[i] &lt; dep[j])<br>            {<br>                platform_needed ++;<br>                i ++;<br>                if (platform_needed &gt; max_platform)<br>                    max_platform = platform_needed;<br>                System.out.println(platform_needed);<br>            }<br>            else{<br>                platform_needed –;<br>                j ++;<br>            }<br>        }<br>        System.out.println(max_platform);</p><pre><code>&#125;</code></pre><p>#8 Second largest<br>    public static void main(String args[])<br>    {<br>        int[] arr1={7,5,6,1,4,2};<br>        int secondHighest=findSecondLargestNumberInTheArray(arr1);<br>        System.out.println(“Second largest element in the array : “+ secondHighest);<br>    }<br>    public static int findSecondLargestNumberInTheArray(int array[])<br>    {<br>        int highest = 0;<br>        int secondHighest = 0;<br>        for (int i = 0; i &lt; array.length; i++) {<br>            if (array[i] &gt; highest) {<br>                secondHighest = highest;<br>                highest = array[i];<br>            } else if (array[i] &gt; secondHighest &amp;&amp; array[i]!=highest)<br>                // Just replace the second highest<br>                secondHighest = array[i];<br>        }<br>        // After exiting the loop, secondHighest now represents the second<br>        // largest value in the array<br>        return secondHighest;<br>    }</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Project Instruction</title>
    <link href="/2021/11/08/Project%20Instruction/"/>
    <url>/2021/11/08/Project%20Instruction/</url>
    
    <content type="html"><![CDATA[<h1 id="This-is-one-of-the-projects-I-participated-in-coding-and-deisgn-The-project-is-bascially-a-Travel-Website-design-in-Java-Javascript-HTML-CSS-and-son-on-with-the-function-of-Registration-Login-Mail-validation-travel-route-Tour-details-display-Favorite-travel-route-based-on-mysql-database"><a href="#This-is-one-of-the-projects-I-participated-in-coding-and-deisgn-The-project-is-bascially-a-Travel-Website-design-in-Java-Javascript-HTML-CSS-and-son-on-with-the-function-of-Registration-Login-Mail-validation-travel-route-Tour-details-display-Favorite-travel-route-based-on-mysql-database" class="headerlink" title="This is one of the projects I participated in coding and deisgn. The project is bascially a Travel Website design in Java, Javascript, HTML, CSS and son on, with the function of Registration, Login, Mail validation, travel route,Tour details display, Favorite travel route based on mysql database."></a>This is one of the projects I participated in coding and deisgn. The project is bascially a Travel Website design in Java, Javascript, HTML, CSS and son on, with the function of Registration, Login, Mail validation, travel route,Tour details display, Favorite travel route based on mysql database.</h1><p>Technology selectives in details:<br>Front-end : HTML、CSS、JS、JQuery、Ajax, Servelet, Filter , BeanUtils, Jackson<br>Service: JavaMail, Redis, Jedis<br>Dao:Druid, JDBCutils, JDBCtemplate, Mysql<br><img src="/2021/11/08/Project%20Instruction/database_structure.png"></p><h2 id="The-following-I-list-is-some-of-specific-parts-that-I-am-involved-and-I-felt-tricky"><a href="#The-following-I-list-is-some-of-specific-parts-that-I-am-involved-and-I-felt-tricky" class="headerlink" title="The following I list is some of specific parts that I am involved and I felt tricky."></a>The following I list is some of specific parts that I am involved and I felt tricky.</h2><h2 id="First-Front-end-Design"><a href="#First-Front-end-Design" class="headerlink" title="First Front-end Design"></a>First Front-end Design</h2><ol><li>[Send asynchronous request]<br>![]validationcode.png<br>//The verification is passed, ajax sends the request, and the form data is submitted $(“#registerForm”).serialize()</li></ol><p>$.post(“registerUserServlet”,$(this).serialize(),function (data) {<br>    if(data.flag){<br>        //Registration is successful, jump to the successful page<br>        location.href= “register_ok.html”;<br>    }else{<br>        //If there is an error, you need to request the verification code servlet again, otherwise it will cause the verification code in the session to disappear. Although the picture exists, the code is no longer here.</p><p>//document.getElementById(“check_img”).src= “checkCode?”+new Date().getTime();<br>        //Registration failed, add prompt information to errormsg<br>        $(“#error_msg”).html(data.errorMsg);<br>    }<br>})</p><ol start="2"><li>[Verify mobile phone number format]<br>var reg_telephone = /^1(3|4|5|7|8)\d{9}$/;</li><li>[Verify mailbox format]<br>var reg_email = /^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(.[a-zA-Z0-9_-]+)+$/;</li><li>[Loss of focus event]<br>$(“#username”).blur(checkUsername);</li><li>[Front-end and back-end interaction]<br>When it comes to [front-end and back-end interaction], encapsulating information as an object.<br>public class ResultInfo implements Serializable {<br> private boolean flag; //The result returned by the backend is normally true, and false is returned if an exception occurs<br> private Object data;  //The backend returns the result data object<br> private String errorMsg; //An abnormal error message<br>}</li></ol><ol start="6"><li>[jackson]<br>import com.fasterxml.jackson.databind.ObjectMapper; //Serialize the info object to json and return to the client<br>ObjectMapper mapper = new ObjectMapper();<br>String json = mapper.writeValueAsString(info);//Write the json data back to the client side //Set content-type<br>response.setContentType(“application/json;charset=utf-8”);<br>response.getWriter().write(json);</li></ol><ol start="7"><li><p>[checkbox]<br>When the value attribute is not specified, the passed value is on! ! !</p></li><li><p>[Get the splicing parameters in the url]<br>//Acquire the corresponding value according to the passed parameter name<br>function getParameter(name) {<br> var reg = new RegExp(“(^|&amp;)” + name + “=([^&amp;]*)(&amp;|$)”,”i”);<br> var r = location.search.substr(1).match(reg);<br> if (r!=null) return (r[2]); return null;<br>}</p></li></ol><h2 id="Second-the-use-of-tools"><a href="#Second-the-use-of-tools" class="headerlink" title="Second, the use of tools"></a>Second, the use of tools</h2><p>Use [MailUtils] to complete the email sending, but you have to apply to open the service in the email settings.<br>Use [uuid tools] to complete the generation of random activation codes.<br>Use [JedisUtils] to complete the acquisition of the redis client to operate the redis database.<br>Use [JDBCUtils] to encapsulate the druid connection pool and return the data source object.<br><img src="/2021/11/08/Project%20Instruction/jdbc.png"></p><h2 id="Third-servelet-distribution-ideas"><a href="#Third-servelet-distribution-ideas" class="headerlink" title="Third, servelet distribution ideas"></a>Third, servelet distribution ideas</h2><p>Refer to the service method of HttpServlet to distribute the request method, corresponding to different methods, completing different functions similar to Servlet, which really benefited a lot. Looking back and thinking about the original need to define so many and so many Servlets, now they are completely encapsulated. In a UserServlet, great.</p><p>[Distribute Servlet]<br><img src="/2021/11/08/Project%20Instruction/Base_Servlet.png"></p><h2 id="Fourth-the-function-of-the-header-loading-data-from-mysql"><a href="#Fourth-the-function-of-the-header-loading-data-from-mysql" class="headerlink" title="Fourth, the function of the header loading data from mysql"></a>Fourth, the function of the header loading data from mysql</h2><p><img src="/2021/11/08/Project%20Instruction/Category1.png"></p><p>The DAO layer is shown below, using the JDBC template loading data from my database and then update to service layer.<br><img src="/2021/11/08/Project%20Instruction/2.png"></p><p>In the service layer, data is using the jedis in order to reduce the traffic volume and return in a list to servlet layer.<br><img src="/2021/11/08/Project%20Instruction/3.png"></p><p>The will be wrapped in the function as Json and interact with the html.<br><img src="/2021/11/08/Project%20Instruction/4.png"></p><p>And the front page will load the data from database.<br><img src="/2021/11/08/Project%20Instruction/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5G Introduction</title>
    <link href="/2021/11/06/5G/"/>
    <url>/2021/11/06/5G/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-5G"><a href="#What-is-5G" class="headerlink" title="What is 5G?"></a>What is 5G?</h1><p>As we know, 5G has almost nothing to do with classic mobile communications unlike previous technologies such as 4G, there is no strandard 5G network. It is not just an evolution of previous technologies; it is a whole set of new networks accompany with the development of software.The description about might make the whole topic a bit confusing, but the prospects for the 5G standard are good. The maximum speed of up to 20 GB/s, minimized signal propagation time (delay), and many simultaneous mobile devices in each area make all wireless experiences look instantaneous and open the door to new applications. For some of us, nothing will change except for faster video streaming and a more realistic gaming experience, but in the meantime, unidentified use cases are being developed.</p><p>So, what is 5G? In order to take advantage of this technology, what do designers and engineers need to know?</p><p>5G standardization process<br>5G is a general term covering various networks, technologies and applications. It is the standardization of mobile communications. The name 5G was created by the International Telecommunication Union (ITU) as the “fifth generation mobile communication system.” To this end, the standardization organization Third Generation Partnership Project (3GPP) is advancing its 5G implementation through the International Mobile Telecommunications (IMT-2020) program. At the same time, other standardization bodies, including the Institute of Electrical and Electronics Engineers (IEEE) and the International Telecommunication Union, are working on 5G specifications. At the end of 2019, the standardization process was completed, and we are now seeing more and more applications being commercialized.</p><p>Different applications require different antennas</p><p>New communication standards involve many applications, and 5G mobile communication has multiple frequency ranges to consider. Generally, 5G mobile networks can operate at various frequencies, so different antennas need to be used for different frequency bands.<br>5G infographic, 5G applications allocated along the radio wave spectrum<br>5G frequency, range and applications<br>The situation becomes clearer when we pick some 5G frequency bands from the so-called multi-layer spectrum and align them with the application.</p><p>Coverage area: Less than 2 GHz (eg 700 MHz) is suitable for indoor and wider coverage areas, because electromagnetic waves of this wavelength can travel long distances and pass through objects.</p><p>C-Band: 2-6 GHz combines coverage, capacity and the so-called “super data layer”. Frequencies greater than 6 GHz (for example, 24-29 GHz and 37-43 GHz) provide high bandwidth, but require a direct line of sight because even the leaves on the tree can block connections.</p><p>Since various frequencies are used to transmit signals for different applications, special antennas and antenna concepts are required. Therefore, the change in the frequency band used for communication is one of the reasons why we see more antennas. The particularity of New Radio (NR) and the need for signal line-of-sight is another reason why we see more antennas.</p><p>5G NR works differently from 4G</p><p>As the demand for frequencies continues to grow, federal communications agencies (such as the FCC in the United States) are reallocating free or idle frequency ranges. Through re-framing, the frequencies that have been allocated for 5G have been licensed for operation. Therefore, network operators can freely decide which mobile communication technology they want to use.<br>After the expiration of the UMTS frequencies in the 2 GHz band at the end of 2020 and 2025, these frequencies will be allowed to be allocated to 5G from 2021 to 2026 (60 MHz in total).<br>Worldwide, WiMax technology has left an unused 3.5 GHz frequency band. Therefore, by 2022, the 3.6 GHz band will provide a bandwidth of 300 MHz, and the frequency range will be between 3.7 and 3.8 GHz.<br>NR uses the mmWave range (millimeter wave), which starts at 24 GHz and extends to 52.6 GHz. Parts in the 64 to 86 GHz range may be added in the future.<br>However, due to the physical propagation conditions of radio signals, most frequencies used for 5G (3.5 GHz, 26 GHz and above) are only suitable for short distances. However, these frequency ranges have high bandwidth potential. Low-power base stations called femtocells can be used to operate mobile radio hotspots at very high data rates. This means that more base stations are needed. Therefore, at some point, street lights may not only provide light, but also provide access to the mobile gigabit Internet by hosting femtocell base stations.</p><p>5G new radio infographic, comparison of 4G network base stations and 5G urban installations with active directional antennas.<br>4G networks are compared to 5G urban installations with active directional antennas.<br>The antenna is no longer like an antenna<br>The higher frequencies of 5G are very useful for many reasons, one of the most important of which is their huge capacity to support fast data. They have strong directionality and can be used correctly</p>]]></content>
    
    
    <categories>
      
      <category>5G</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>String_Question</title>
    <link href="/2021/08/14/String_Question/"/>
    <url>/2021/08/14/String_Question/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Find-the-anagram-String"><a href="#1-Find-the-anagram-String" class="headerlink" title="1 Find the anagram_String"></a>1 Find the anagram_String</h1><p>public class anagram_string {<br>    String a = “Angel”;<br>    String b = “Angle”;<br>    public void method1(){<br>        System.out.println(method_compare(a,b));<br>    }<br>    public boolean method_compare(String a,String b){<br>        if (a.length() != b.length()){<br>            return false;<br>        }<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            char c = a.charAt(i);<br>            if (b.indexOf(c) != -1){<br>//                b = b.substring(0,b.indexOf(c)) + b.substring(b.indexOf(c)+1);<br>                b = b.replace(“c”,””);<br>            }<br>            else{<br>                return false;<br>            }<br>        }<br>        return true;<br>    }<br>    public void method2(){<br>        System.out.println(compared(a,b));<br>    }<br>    public static boolean compared(String a, String b){<br>        String element1 = sorted(a);<br>        String element2 = sorted(b);<br>        if (element1.equals(element2)){<br>            return true;<br>        }<br>        return false;<br>    }<br>    public static String sorted(String word){<br>        char[] arr = word.toCharArray();<br>        Arrays.sort(arr);<br>//        System.out.println(arr);<br>        return String.valueOf(arr);<br>    }<br>    public static void main(String[] args) {<br>        anagram_string a = new anagram_string();<br>        a.method1();<br>//        String c = “abcdefg”;<br>//        System.out.println(c.substring(0,3));<br>        a.method2();<br>    }<br>}</p><h1 id="2-Find-the-duplicate-character"><a href="#2-Find-the-duplicate-character" class="headerlink" title="2.Find the duplicate character"></a>2.Find the duplicate character</h1><p>   public static void main(String[] args) {<br>        String str = “java2”;<br>        HashMap&lt;Character,Integer&gt; charCountMap = new HashMap();<br>        for (int i = 0; i &lt; str.length(); i++) {<br>            char c = str.charAt(i);<br>            if (charCountMap.containsKey(c)) {<br>                charCountMap.put(c, charCountMap.get(c) + 1);<br>            } else {<br>                charCountMap.put(c, 1);<br>            }<br>        }<br>        for (Character c : charCountMap.keySet()) {<br>            if (charCountMap.get(c) &gt; 1)<br>                System.out.println(“duplicate character : “ + c + “ ====== “ + “ count : “ + charCountMap.get(c));<br>        }<br>    }</p><h1 id="3-Find-the-substring"><a href="#3-Find-the-substring" class="headerlink" title="3.Find the substring"></a>3.Find the substring</h1><p> public static void main(String[] args) {<br>        String a = “abcdef”;<br>        String result = “”;<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            for (int j = i+1; j &lt;= a.length(); j++) {<br>                System.out.println(a.substring(i,j));<br>            }<br>        }<br>    }</p><h1 id="4-Find-the-none-repeated-character"><a href="#4-Find-the-none-repeated-character" class="headerlink" title="4.Find the none-repeated character"></a>4.Find the none-repeated character</h1><p>public static void main(String[] args) {<br>        String a = “easiest”;<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            Character c = a.charAt(i);<br>            if(a.indexOf(c) == a.lastIndexOf(c))<br>            {<br>                System.out.println(a.charAt(i));<br>                break;<br>            }<br>        }<br>    }</p><h1 id="5-Find-the-Parlindrome"><a href="#5-Find-the-Parlindrome" class="headerlink" title="5. Find the Parlindrome"></a>5. Find the Parlindrome</h1><p>   public static void main(String[] args) {<br>        System.out.println(method());<br>    }<br>    public static boolean method() {<br>        String a = “A man, a plan, a canal:Panama”;<br>        int left = 0, right = a.length() - 1;<br>        while (left &lt; right) {<br>            while (left &lt; right &amp;&amp; !(helper(a.charAt(left)))) {<br>                left++;<br>            }<br>            while (left &lt; right &amp;&amp; !(helper(a.charAt(right)))) {<br>                right–;<br>            }</p><p>//            if (left &gt;= right) {<br>//                return true;<br>//            }<br>            if (Character.toLowerCase(a.charAt(left)) !=<br>                    Character.toLowerCase(a.charAt(right))) {<br>                return false;<br>            } else {<br>                left++;<br>                right–;<br>            }<br>        }return true;<br>    }<br>//        for (int i = 0; i &lt; a.length(); i++) {<br>//            if(helper(a.charAt(i))){<br>//                b += a.charAt(i);<br>//                }<br>//            }<br>//        System.out.println(b);<br>    public static boolean helper(Character f){<br>        return  (Character.isLetter(f) || Character.isDigit(f));<br>    }<br>}</p><h1 id="6-Find-the-permutation-of-String"><a href="#6-Find-the-permutation-of-String" class="headerlink" title="6 Find the permutation of String"></a>6 Find the permutation of String</h1><p>public static void main(String[] args) {<br>            Set set=permutationOfString(“ABC”);        //ABC stores the set<br>            System.out.println(“Permutations of String ABC are:”);<br>            for (Iterator iterator = set.iterator(); iterator.hasNext();) {<br>                String string = (String) iterator.next();<br>                System.out.println(string);<br>            }<br>        }<br>        public static Set permutationOfString(String str)<br>        {<br>            Set<String> permutationSet=new HashSet();<br>            if(str.length()==0)<br>            {<br>                permutationSet.add(“”);<br>                return permutationSet;<br>            }<br>            // take out first character of String<br>            char c=str.charAt(0);<br>            // Remaining String<br>            String rem=str.substring(1);<br>            Set<String> permutatedSetForRemainingString=permutationOfString(rem);<br>            for (String permutedString: permutatedSetForRemainingString) {<br>                for (int j = 0; j &lt;= permutedString.length(); j++) {<br>                    String permutation=insertFirstCharAtDiffPlaces(permutedString,c,j);<br>                    permutationSet.add(permutation);<br>                }<br>            }<br>            return permutationSet;<br>        }<br>        public static String insertFirstCharAtDiffPlaces(String perm,char firstChar,int index)<br>        {<br>            // Inserting firstCharacter of orig String at difference places based on index<br>            return perm.substring(0,index)+firstChar+perm.substring(index);<br>        }<br>    }</String></String></p><h1 id="7-Reverse-a-string"><a href="#7-Reverse-a-string" class="headerlink" title="7 Reverse a string"></a>7 Reverse a string</h1><p>public static void method1(){<br>        String a = “abcdefg”;<br>        String result = “”;<br>        for (int i = a.length()-1; i &gt;= 0; i–) {<br>            result = result + a.charAt(i);<br>        }<br>        System.out.println(result);<br>    }<br>    public static void method2(){<br>        String a  = “abcdefg”;<br>        StringBuffer aa = new StringBuffer(a);<br>        System.out.println(aa.reverse());<br>    }<br>    public String recursiveReverse(String orig) {<br>        if (orig.length() == 1)<br>            return orig;<br>        else<br>            return orig.charAt(orig.length() - 1) +<br>                    recursiveReverse(orig.substring(0, orig.length() - 1));<br>    }<br>    public static void main(String[] args) {<br>        reverse_string a = new reverse_string();<br>        a.method1();<br>        a.method2();<br>        String blogName = “java2blog”;<br>        String reverse = a.recursiveReverse(blogName);<br>        System.out.println(“Reverse of java2blog is:” + reverse);<br>    }</p><h1 id="8-Check-rotation-of-a-string"><a href="#8-Check-rotation-of-a-string" class="headerlink" title="8 Check rotation of a string"></a>8 Check rotation of a string</h1><p>public class Rotation {<br>    public static boolean method(String st1, String st2){<br>        String st3 = st1 + st1;<br>        if(st3.contains((st2))){<br>            return true;<br>        }<br>        return false;<br>    }<br>    public static void main(String[] args) {<br>        Scanner sc = new Scanner(System.in);<br>        System.out.println(“please input the first string”);<br>        String st1 = sc.nextLine();<br>        System.out.println(“please input the sec string”);<br>        String st2 = sc.nextLine();<br>        Rotation aa = new Rotation();<br>        System.out.println(aa.method(st1,st2));<br>    }<br>}</p><h1 id="9-unique-character-or-not"><a href="#9-unique-character-or-not" class="headerlink" title="9 unique character or not"></a>9 unique character or not</h1><p>public class Unique_or_not {<br>    String a = “ifijk”;<br>    public boolean method() {<br>        HashSet<Character> strings = new HashSet&lt;&gt;();<br>        for (int i = 0; i &lt; a.length() - 1; i++) {<br>            char c = a.charAt(i);<br>            if (!strings.add(c)) {<br>                return false;<br>            }<br>        }<br>        return true;<br>    }<br>    public boolean method2(){<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            char c = a.charAt(i);<br>            if(a.indexOf(c)!=a.lastIndexOf(c)){<br>                return false;<br>            }<br>        }<br>        return true;<br>    }<br>    public static void main(String[] args) {<br>        Unique_or_not test = new Unique_or_not();<br>        System.out.println(test.method());<br>        System.out.println(test.method2());<br>    }</Character></p><p>}</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Foundamental_Qustions</title>
    <link href="/2019/05/14/Foundamental%20Question/"/>
    <url>/2019/05/14/Foundamental%20Question/</url>
    
    <content type="html"><![CDATA[<h1 id="1-There-is-a-pair-of-rabbits-From-the-third-month-after-birth-a-pair-of-rabbits-are-born-every-month-After-the-little-rabbit-grows-to-the-third-month-another-pair-of-rabbits-is-born-every-month-If-the-rabbits-are-not-dead-ask-the-rabbits-of-each-month-What-is-the-total"><a href="#1-There-is-a-pair-of-rabbits-From-the-third-month-after-birth-a-pair-of-rabbits-are-born-every-month-After-the-little-rabbit-grows-to-the-third-month-another-pair-of-rabbits-is-born-every-month-If-the-rabbits-are-not-dead-ask-the-rabbits-of-each-month-What-is-the-total" class="headerlink" title="1.There is a pair of rabbits. From the third month after birth, a pair of rabbits are born every month. After the little rabbit grows to the third month, another pair of rabbits is born every month. If the rabbits are not dead, ask the rabbits of each month. What is the total?"></a>1.There is a pair of rabbits. From the third month after birth, a pair of rabbits are born every month. After the little rabbit grows to the third month, another pair of rabbits is born every month. If the rabbits are not dead, ask the rabbits of each month. What is the total?</h1><p>//Dynamic programming to solve<br>public static void ChangeRabbit(){<br>        int n = 20;<br>        int [] record = new int[n+1];<br>        record[0] = 1;<br>        record[1] = 1;<br>        for (int i = 2; i &lt; n; i++) {<br>            record[i] = record[i-1] + record[i-2];<br>        }<br>        for (int i = 0; i &lt; 10; i++) {<br>            System.out.println(record[i]);<br>        }<br>    }<br>//Keep only two records<br>public static void ChangeRabbit1(){<br>        int result,tem1=1,tem2=1;<br>        System.out.println(tem1);<br>        System.out.println(tem2);<br>        for (int i = 2; i &lt; 20; i++) {<br>            result = tem1+tem2;<br>            tem1 = tem2;<br>            tem2 = result;<br>            System.out.println(result);<br>        }<br>    }</p><h1 id="Q2-How-many-prime-numbers-there-are-between-101-200-and-output-all-prime-numbers"><a href="#Q2-How-many-prime-numbers-there-are-between-101-200-and-output-all-prime-numbers" class="headerlink" title="Q2 How many prime numbers there are between 101-200, and output all prime numbers."></a>Q2 How many prime numbers there are between 101-200, and output all prime numbers.</h1><pre><code>public static void primeNum() &#123;    int count = 0;    for (int i = 101; i &lt; 200; i++) &#123;        if(priHelper(i))&#123;            count +=1;            System.out.println(i);        &#125;    &#125;    System.out.println(&quot;The total prime number between 100 to 200 is: &quot;+count);&#125;public static boolean priHelper(int n)&#123;    if(n&lt;=1)&#123;        return false;    &#125;    //forgot sqrt &amp;&amp; equal    for (int i = 2; i &lt;= Math.sqrt(n); i++) &#123;        if(n%i==0)&#123;            return false;        &#125;    &#125;    return true;&#125;</code></pre><h1 id="Q3-Print-out-all-the-“daffodil-numbers”-the-so-called-“daffodil-numbers”-refers-to-a-three-digit-number-whose-cubic-sum-of-the-digits-is-equal-to-the-number-itself-For-example-153-is-a-“daffodil-number”-because-153-1-cube-5-cube-3-cube"><a href="#Q3-Print-out-all-the-“daffodil-numbers”-the-so-called-“daffodil-numbers”-refers-to-a-three-digit-number-whose-cubic-sum-of-the-digits-is-equal-to-the-number-itself-For-example-153-is-a-“daffodil-number”-because-153-1-cube-5-cube-3-cube" class="headerlink" title="Q3 Print out all the “daffodil numbers”, the so-called “daffodil numbers” refers to a three-digit number whose cubic sum of the digits is equal to the number itself. For example: 153 is a “daffodil number”, because 153=1 cube + 5 cube + 3 cube."></a>Q3 Print out all the “daffodil numbers”, the so-called “daffodil numbers” refers to a three-digit number whose cubic sum of the digits is equal to the number itself. For example: 153 is a “daffodil number”, because 153=1 cube + 5 cube + 3 cube.</h1><pre><code>public static void NarcissisticNumber()&#123;    for (int i = 100; i &lt; 999; i++) &#123;        int unit = i % 10;        int decade =  i /10 % 10;        int hundred = i / 10 / 10;        if(i == unit * unit * unit + decade* decade * decade + hundred * hundred * hundred)&#123;            System.out.println(i);        &#125;    &#125;&#125;</code></pre><h1 id="Q4-Decompose-a-positive-integer-into-prime-factors-For-example-input-90-print-out-90-233-5"><a href="#Q4-Decompose-a-positive-integer-into-prime-factors-For-example-input-90-print-out-90-233-5" class="headerlink" title="Q4: Decompose a positive integer into prime factors. For example: input 90, print out 90=233*5."></a>Q4: Decompose a positive integer into prime factors. For example: input 90, print out 90=2<em>3</em>3*5.</h1><pre><code>public static void DecompositionPrimeFactor() &#123;    int n = 90;    for (int i = 2; i &lt; Math.sqrt(n); i++) &#123;        if(n%i ==0)&#123;            System.out.print(i+&quot;*&quot;);            n/=i;            i--;        &#125;    &#125;    System.out.println(n);&#125;public static void DecompositionPrimeFactor2()&#123;    int factor = 90;    System.out.print(factor + &quot;=&quot;);        for (int i = 2; i &lt; Math.sqrt(factor); i++) &#123;            while(factor % i==0) &#123;                System.out.print(i + &quot;*&quot;);                factor = factor/i;            &#125;        &#125;    System.out.print(factor);&#125;</code></pre><h1 id="Q5-Input-two-positive-integers-m-and-n-find-their-greatest-common-divisor-and-least-common-multiple"><a href="#Q5-Input-two-positive-integers-m-and-n-find-their-greatest-common-divisor-and-least-common-multiple" class="headerlink" title="Q5 Input two positive integers m and n, find their greatest common divisor and least common multiple."></a>Q5 Input two positive integers m and n, find their greatest common divisor and least common multiple.</h1><p> public static void get_lcm(int a, int b){<br>        int lcm = grades(a,b);<br>        System.out.println(lcm);<br>        System.out.println(a*b/lcm);<br>    }<br>    public static int grades(int a, int b){<br>        if (b&gt;a){<br>            int tem;<br>            tem = a;<br>            a = b;<br>            tem = b;<br>        }<br>        int temp;<br>        while(b!=0){<br>            temp = a % b;<br>            a = b;<br>            b = temp;<br>        }<br>       return a;<br>    }</p><h1 id="Q6-Enter-a-line-of-characters-and-count-the-number-of-English-letters-spaces-numbers-and-other-characters-in-it"><a href="#Q6-Enter-a-line-of-characters-and-count-the-number-of-English-letters-spaces-numbers-and-other-characters-in-it" class="headerlink" title="Q6 Enter a line of characters, and count the number of English letters, spaces, numbers and other characters in it."></a>Q6 Enter a line of characters, and count the number of English letters, spaces, numbers and other characters in it.</h1><p> public static void digitcheck(){<br>        String a = “adfjkldasfj&lt;&gt;?&lt;&gt;?  12321321”;<br>        int digitCount = 0, spaceCount=0, elseCount=0;<br>        for (int i = 0; i &lt; a.length(); i++) {<br>            if(Character.isLetter(a.charAt(i))){<br>                digitCount++;<br>            }<br>            else if(a.charAt(i)==’ ‘){<br>                spaceCount++;<br>            }<br>            else{<br>                elseCount++;<br>            }<br>        }<br>        System.out.println(“digitCount is like”+digitCount + “ spaceCount is like” + spaceCount+ “elseCount is like” + elseCount );<br>    }</p><h1 id="Q7-Find-the-value-of-s-a-aa-aaa-aaaa-aa…a-where-a-is-a-number-For-example-2-22-222-2222-22222-there-are-5-numbers-added-at-this-time-and-the-addition-of-several-numbers-is-controlled-by-the-keyboard"><a href="#Q7-Find-the-value-of-s-a-aa-aaa-aaaa-aa…a-where-a-is-a-number-For-example-2-22-222-2222-22222-there-are-5-numbers-added-at-this-time-and-the-addition-of-several-numbers-is-controlled-by-the-keyboard" class="headerlink" title="Q7 Find the value of s=a+aa+aaa+aaaa+aa…a, where a is a number. For example, 2+22+222+2222+22222 (there are 5 numbers added at this time), and the addition of several numbers is controlled by the keyboard."></a>Q7 Find the value of s=a+aa+aaa+aaaa+aa…a, where a is a number. For example, 2+22+222+2222+22222 (there are 5 numbers added at this time), and the addition of several numbers is controlled by the keyboard.</h1><pre><code>public static  void numberPlus1()&#123;        int a=2,n=5, b=a;        for(int i=0;i&lt;n;i++)        &#123;            System.out.print(a+&quot;+&quot;);            a=a*10;            a+=b;            if(i==n-1)&#123;                System.out.println(a);            &#125;        &#125;&#125;public static void numberPlus()&#123;    int a = 2;    int b = 5;    System.out.print(a);    for (int i = 1; i &lt;= b; i++) &#123;                int count = i;                int tem = 0;                a = 2;                while(count!=0)&#123;                    a = a * 10;                    tem += a;                    count--;                &#125;                tem += 2;                System.out.print(&quot;+&quot; + tem);    &#125;&#125;public static void numberPlus2()&#123;    int a = 2;    for (int i = 0; i &lt; 5; i++) &#123;        System.out.print(a + &quot;+&quot;);        a = a * 10;        a += 2;    &#125;&#125;</code></pre><h1 id="Q8-With-1-2-3-and-4-numbers-how-many-different-three-digit-numbers-can-be-formed-without-repeating-numbers-How-much-are-they"><a href="#Q8-With-1-2-3-and-4-numbers-how-many-different-three-digit-numbers-can-be-formed-without-repeating-numbers-How-much-are-they" class="headerlink" title="Q8 With 1, 2, 3, and 4 numbers, how many different three-digit numbers can be formed without repeating numbers? How much are they?"></a>Q8 With 1, 2, 3, and 4 numbers, how many different three-digit numbers can be formed without repeating numbers? How much are they?</h1><p> public static void numPermutation(){<br>        for (int i = 1; i &lt;= 4; i++) {<br>            for (int j = 1; j &lt;= 4; j++) {<br>                for (int k = 1; k &lt;= 4; k++) {<br>                    System.out.print(i+j<em>10+k*100+” “);<br>                }<br>            }<br>        }<br>    }<br>    public static void numPermutation1(){<br>        for (int i = 100; i &lt; 999; i++) {<br>            int unit=i  % 10;<br>            int ten= i /10 % 10;<br>            int hundred = i /10 /10 % 10;<br>            if(unit&lt;=4 &amp;&amp; ten &lt;= 4 &amp;&amp; hundred&lt;=4 &amp;&amp; unit &gt;0 &amp;&amp; ten &gt;0 &amp;&amp; hundred&gt;0){<br>                System.out.println(unit + ten</em>10 + hundred*100);<br>            }<br>        }<br>    }</p><h1 id="Q9-A-ball-falls-freely-from-a-height-of-100-meters-and-bounces-back-to-half-of-its-original-height-after-each-landing-if-it-falls-again-how-many-meters-does-it-travel-when-it-hits-the-ground-for-the-10th-time-How-high-is-the-10th-rally"><a href="#Q9-A-ball-falls-freely-from-a-height-of-100-meters-and-bounces-back-to-half-of-its-original-height-after-each-landing-if-it-falls-again-how-many-meters-does-it-travel-when-it-hits-the-ground-for-the-10th-time-How-high-is-the-10th-rally" class="headerlink" title="Q9 A ball falls freely from a height of 100 meters, and bounces back to half of its original height after each landing; if it falls again, how many meters does it travel when it hits the ground for the 10th time? How high is the 10th rally?"></a>Q9 A ball falls freely from a height of 100 meters, and bounces back to half of its original height after each landing; if it falls again, how many meters does it travel when it hits the ground for the 10th time? How high is the 10th rally?</h1><p>   public static void bounceBall(){<br>        double height = 100;<br>        double pass =  height;<br>        for (int i = 0; i &lt; 10; i++) {<br>            height /= 2;<br>            pass += height * 2;<br>        }<br>        System.out.println(pass);<br>    }</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
